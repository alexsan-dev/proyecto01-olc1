
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 05 22:13:10 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.javascript;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import com.alexsantos.proyecto01.utils.Tools;
import com.alexsantos.proyecto01.analyzer.errors.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 05 22:13:10 CST 2021
  */
public class JSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JSParser() {super();}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\035\004\000\002\035\004\000\002\035\003\000" +
    "\002\035\003\000\002\041\003\000\002\042\003\000\002" +
    "\036\005\000\002\036\004\000\002\005\005\000\002\040" +
    "\006\000\002\040\005\000\002\037\005\000\002\037\003" +
    "\000\002\034\004\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\005\000\002\010\004\000\002\010\004\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\011\005" +
    "\000\002\011\003\000\002\033\005\000\002\033\006\000" +
    "\002\033\006\000\002\033\003\000\002\016\005\000\002" +
    "\016\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\004\000\002\012\004\000\002\012\006\000" +
    "\002\013\007\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\023\007\000\002\032\007\000\002\024" +
    "\007\000\002\025\010\000\002\026\014\000\002\027\004" +
    "\000\002\027\003\000\002\030\007\000\002\030\010\000" +
    "\002\030\007\000\002\030\006\000\002\031\010\000\002" +
    "\031\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\006\013\051\006\001\002\000\010\002" +
    "\ufffd\006\ufffd\051\ufffd\001\002\000\004\013\053\001\002" +
    "\000\004\006\051\001\002\000\010\002\000\006\013\051" +
    "\006\001\002\000\010\002\ufffe\006\ufffe\051\ufffe\001\002" +
    "\000\010\002\ufffc\006\ufffc\051\ufffc\001\002\000\004\002" +
    "\047\001\002\000\004\016\014\001\002\000\030\004\023" +
    "\005\016\006\017\017\027\041\021\047\015\050\024\056" +
    "\026\057\025\070\020\074\030\001\002\000\004\006\046" +
    "\001\002\000\144\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7" +
    "\020\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030" +
    "\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7" +
    "\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045" +
    "\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\054\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\070\uffb7\071\uffb7\074\uffb7\001\002" +
    "\000\144\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\044\050\045\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\070\uffb5\071\uffb5\074\uffb5\001\002\000\144" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012" +
    "\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\020\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6" +
    "\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\070\uffb6\071\uffb6\074\uffb6\001\002\000\010\006\043" +
    "\056\041\057\042\001\002\000\006\011\uffef\017\uffef\001" +
    "\002\000\144\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054" +
    "\uffb8\056\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\070\uffb8\071\uffb8\074\uffb8\001\002\000" +
    "\004\006\040\001\002\000\144\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015\uffb3\016" +
    "\uffb3\017\uffb3\020\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052" +
    "\uffb3\053\uffb3\054\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\070\uffb3\071\uffb3\074" +
    "\uffb3\001\002\000\144\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\020\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053" +
    "\uffb4\054\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4" +
    "\063\uffb4\064\uffb4\065\uffb4\070\uffb4\071\uffb4\074\uffb4\001" +
    "\002\000\072\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\013\ufff1\014\ufff1\015\ufff1\016\ufff1\024\ufff1\041\ufff1\047" +
    "\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\056\ufff1" +
    "\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065" +
    "\ufff1\070\ufff1\071\ufff1\074\ufff1\001\002\000\004\016\035" +
    "\001\002\000\006\011\032\017\033\001\002\000\026\004" +
    "\023\005\016\006\017\041\021\047\015\050\024\056\026" +
    "\057\025\070\020\074\030\001\002\000\072\004\ufff2\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\024\ufff2\041\ufff2\047\ufff2\050\ufff2\051\ufff2\052" +
    "\ufff2\053\ufff2\054\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\062\ufff2\063\ufff2\064\ufff2\065\ufff2\070\ufff2\071\ufff2\074" +
    "\ufff2\001\002\000\006\011\ufff0\017\ufff0\001\002\000\004" +
    "\005\036\001\002\000\004\017\037\001\002\000\144\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012\uffab" +
    "\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\062\uffab\063\uffab\064\uffab\065\uffab" +
    "\070\uffab\071\uffab\074\uffab\001\002\000\144\004\uffac\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\014\uffac" +
    "\015\uffac\016\uffac\017\uffac\020\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\056\uffac\057\uffac\060" +
    "\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\070\uffac" +
    "\071\uffac\074\uffac\001\002\000\144\004\uffb1\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015\uffb1" +
    "\016\uffb1\017\uffb1\020\uffb1\023\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1" +
    "\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\056\uffb1\057\uffb1\060\uffb1\061" +
    "\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\070\uffb1\071\uffb1" +
    "\074\uffb1\001\002\000\144\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\065\uffb2\070\uffb2\071\uffb2\074\uffb2" +
    "\001\002\000\144\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\070\uffb0\071\uffb0\074\uffb0\001\002" +
    "\000\144\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\070\uffaf\071\uffaf\074\uffaf\001\002\000\144" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012" +
    "\uffae\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032" +
    "\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\056\uffae" +
    "\057\uffae\060\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065" +
    "\uffae\070\uffae\071\uffae\074\uffae\001\002\000\144\004\uffad" +
    "\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\014" +
    "\uffad\015\uffad\016\uffad\017\uffad\020\uffad\023\uffad\024\uffad" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\052\uffad\053\uffad\054\uffad\056\uffad\057\uffad" +
    "\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad\070" +
    "\uffad\071\uffad\074\uffad\001\002\000\004\002\001\001\002" +
    "\000\010\002\uffff\006\uffff\051\uffff\001\002\000\004\013" +
    "\053\001\002\000\072\002\ufff3\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\014\ufff3\015\ufff3\016\ufff3\024\ufff3\041" +
    "\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\070\ufff3\071\ufff3\074\ufff3\001\002\000\066" +
    "\004\023\005\016\006\110\007\113\010\102\014\057\016" +
    "\103\024\075\041\115\047\015\050\024\051\006\052\100" +
    "\053\076\054\120\056\026\057\025\060\070\061\056\062" +
    "\064\063\112\064\074\065\061\070\020\071\101\074\030" +
    "\001\002\000\070\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\024\ufff8\041\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\056\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8" +
    "\070\ufff8\071\ufff8\074\ufff8\001\002\000\142\004\uffd4\005" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\014\uffd4" +
    "\015\uffd4\016\uffd4\017\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\056\uffd4\057\uffd4\060\uffd4\061" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\070\uffd4\071\uffd4" +
    "\074\uffd4\001\002\000\006\016\uffa8\060\262\001\002\000" +
    "\072\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\024\ufff4\041\ufff4\047\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\070" +
    "\ufff4\071\ufff4\074\ufff4\001\002\000\070\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf\024" +
    "\uffdf\041\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf" +
    "\054\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063" +
    "\uffdf\064\uffdf\065\uffdf\070\uffdf\071\uffdf\074\uffdf\001\002" +
    "\000\004\016\237\001\002\000\142\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\014\uffce\015\uffce" +
    "\016\uffce\017\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\063\uffce\064\uffce\065\uffce\070\uffce\071\uffce\074\uffce" +
    "\001\002\000\070\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\014\uffe9\015\uffe9\016\uffe9\024\uffe9\041\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\056\uffe9\057" +
    "\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9" +
    "\070\uffe9\071\uffe9\074\uffe9\001\002\000\004\016\226\001" +
    "\002\000\070\004\uffde\005\uffde\006\uffde\007\113\010\102" +
    "\014\uffde\015\uffde\016\uffde\024\uffde\041\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\056\uffde\057\uffde" +
    "\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\070" +
    "\uffde\071\uffde\074\uffde\001\002\000\070\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\014\ufff9\015\ufff9\016\ufff9\024" +
    "\ufff9\041\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\065\ufff9\070\ufff9\071\ufff9\074\ufff9\001\002" +
    "\000\070\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\014" +
    "\uffe7\015\uffe7\016\uffe7\024\uffe7\041\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\056\uffe7\057\uffe7\060" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\070\uffe7" +
    "\071\uffe7\074\uffe7\001\002\000\004\016\uffa9\001\002\000" +
    "\142\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\135\014\uffd0\015\uffd0\016\uffd0\017\uffd0\023\147\024" +
    "\146\025\134\026\136\027\150\030\132\031\151\032\144" +
    "\033\133\034\130\035\127\036\141\037\137\040\124\041" +
    "\uffd0\042\143\043\125\044\142\045\140\046\131\047\uffd0" +
    "\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\056\uffd0\057" +
    "\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0" +
    "\070\uffd0\071\uffd0\074\uffd0\001\002\000\070\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\024\uffe6\041\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053" +
    "\uffe6\054\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\065\uffe6\070\uffe6\071\uffe6\074\uffe6\001" +
    "\002\000\070\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\014\uffe3\015\uffe3\016\uffe3\024\uffe3\041\uffe3\047\uffe3\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\057\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\070" +
    "\uffe3\071\uffe3\074\uffe3\001\002\000\004\013\053\001\002" +
    "\000\004\016\214\001\002\000\004\006\uffd7\001\002\000" +
    "\066\004\023\005\016\006\110\007\113\010\102\014\211" +
    "\016\103\024\075\041\115\047\015\050\024\051\006\052" +
    "\100\053\076\054\120\056\026\057\025\060\070\061\056" +
    "\062\064\063\112\064\074\065\061\070\020\071\101\074" +
    "\030\001\002\000\004\006\uffd8\001\002\000\004\072\203" +
    "\001\002\000\070\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\024\ufff6\041\ufff6\047\ufff6" +
    "\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6" +
    "\070\ufff6\071\ufff6\074\ufff6\001\002\000\026\004\023\005" +
    "\016\006\017\041\021\047\015\050\024\056\026\057\025" +
    "\070\020\074\030\001\002\000\072\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\013\053\014\uffe2\015\uffe2\016\uffe2" +
    "\024\uffe2\041\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053" +
    "\uffe2\054\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\070\uffe2\071\uffe2\074\uffe2\001" +
    "\002\000\070\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\024\uffe0\041\uffe0\047\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056\uffe0\057\uffe0" +
    "\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\070" +
    "\uffe0\071\uffe0\074\uffe0\001\002\000\070\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\014\uffea\015\177\016\uffea\024" +
    "\uffea\041\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea" +
    "\054\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\070\uffea\071\uffea\074\uffea\001\002" +
    "\000\004\006\171\001\002\000\136\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\012\uffb5\014\uffb5\015\uffb5\016\014" +
    "\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\044\050\045\051\uffb5\052\uffb5\053\uffb5\054\uffb5" +
    "\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\064" +
    "\uffb5\065\uffb5\070\uffb5\071\uffb5\074\uffb5\001\002\000\136" +
    "\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\135\014" +
    "\uffe1\015\uffe1\016\uffe1\023\147\024\146\025\134\026\136" +
    "\027\150\030\132\031\151\032\144\033\133\034\130\035" +
    "\127\036\141\037\137\040\124\041\uffe1\042\143\043\125" +
    "\044\142\045\140\046\131\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\070\uffe1\071\uffe1\074" +
    "\uffe1\001\002\000\004\016\163\001\002\000\070\004\ufff7" +
    "\005\ufff7\006\ufff7\007\ufff7\010\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\024\ufff7\041\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\070\ufff7\071\ufff7\074\ufff7" +
    "\001\002\000\070\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\024\uffe8\041\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\056\uffe8\057" +
    "\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\070\uffe8\071\uffe8\074\uffe8\001\002\000\012\006\043\016" +
    "\156\056\041\057\042\001\002\000\070\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\014\uffe4\015\uffe4\016\uffe4\024" +
    "\uffe4\041\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4" +
    "\054\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063" +
    "\uffe4\064\uffe4\065\uffe4\070\uffe4\071\uffe4\074\uffe4\001\002" +
    "\000\070\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\014" +
    "\uffe5\015\uffe5\016\uffe5\024\uffe5\041\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060" +
    "\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\070\uffe5" +
    "\071\uffe5\074\uffe5\001\002\000\004\006\uffd6\001\002\000" +
    "\004\016\122\001\002\000\032\004\023\005\016\006\017" +
    "\016\103\024\075\041\115\047\015\050\024\056\026\057" +
    "\025\070\020\074\030\001\002\000\054\012\135\017\145" +
    "\023\147\024\146\025\134\026\136\027\150\030\132\031" +
    "\151\032\144\033\133\034\130\035\127\036\141\037\137" +
    "\040\124\042\143\043\125\044\142\045\140\046\131\001" +
    "\002\000\032\004\uffbd\005\uffbd\006\uffbd\016\uffbd\024\uffbd" +
    "\041\uffbd\047\uffbd\050\uffbd\056\uffbd\057\uffbd\070\uffbd\074" +
    "\uffbd\001\002\000\032\004\uffb9\005\uffb9\006\uffb9\016\uffb9" +
    "\024\uffb9\041\uffb9\047\uffb9\050\uffb9\056\uffb9\057\uffb9\070" +
    "\uffb9\074\uffb9\001\002\000\032\004\023\005\016\006\017" +
    "\016\103\024\075\041\115\047\015\050\024\056\026\057" +
    "\025\070\020\074\030\001\002\000\032\004\uffc0\005\uffc0" +
    "\006\uffc0\016\uffc0\024\uffc0\041\uffc0\047\uffc0\050\uffc0\056" +
    "\uffc0\057\uffc0\070\uffc0\074\uffc0\001\002\000\032\004\uffc1" +
    "\005\uffc1\006\uffc1\016\uffc1\024\uffc1\041\uffc1\047\uffc1\050" +
    "\uffc1\056\uffc1\057\uffc1\070\uffc1\074\uffc1\001\002\000\032" +
    "\004\uffc4\005\uffc4\006\uffc4\016\uffc4\024\uffc4\041\uffc4\047" +
    "\uffc4\050\uffc4\056\uffc4\057\uffc4\070\uffc4\074\uffc4\001\002" +
    "\000\032\004\uffc7\005\uffc7\006\uffc7\016\uffc7\024\uffc7\041" +
    "\uffc7\047\uffc7\050\uffc7\056\uffc7\057\uffc7\070\uffc7\074\uffc7" +
    "\001\002\000\032\004\uffc2\005\uffc2\006\uffc2\016\uffc2\024" +
    "\uffc2\041\uffc2\047\uffc2\050\uffc2\056\uffc2\057\uffc2\070\uffc2" +
    "\074\uffc2\001\002\000\034\004\uffcb\005\uffcb\006\uffcb\016" +
    "\uffcb\024\uffcb\025\154\041\uffcb\047\uffcb\050\uffcb\056\uffcb" +
    "\057\uffcb\070\uffcb\074\uffcb\001\002\000\004\012\153\001" +
    "\002\000\032\004\uffc9\005\uffc9\006\uffc9\016\uffc9\024\uffc9" +
    "\041\uffc9\047\uffc9\050\uffc9\056\uffc9\057\uffc9\070\uffc9\074" +
    "\uffc9\001\002\000\032\004\uffbe\005\uffbe\006\uffbe\016\uffbe" +
    "\024\uffbe\041\uffbe\047\uffbe\050\uffbe\056\uffbe\057\uffbe\070" +
    "\uffbe\074\uffbe\001\002\000\032\004\uffbb\005\uffbb\006\uffbb" +
    "\016\uffbb\024\uffbb\041\uffbb\047\uffbb\050\uffbb\056\uffbb\057" +
    "\uffbb\070\uffbb\074\uffbb\001\002\000\032\004\uffbf\005\uffbf" +
    "\006\uffbf\016\uffbf\024\uffbf\041\uffbf\047\uffbf\050\uffbf\056" +
    "\uffbf\057\uffbf\070\uffbf\074\uffbf\001\002\000\032\004\uffbc" +
    "\005\uffbc\006\uffbc\016\uffbc\024\uffbc\041\uffbc\047\uffbc\050" +
    "\uffbc\056\uffbc\057\uffbc\070\uffbc\074\uffbc\001\002\000\032" +
    "\004\uffba\005\uffba\006\uffba\016\uffba\024\uffba\041\uffba\047" +
    "\uffba\050\uffba\056\uffba\057\uffba\070\uffba\074\uffba\001\002" +
    "\000\032\004\uffc5\005\uffc5\006\uffc5\016\uffc5\024\uffc5\041" +
    "\uffc5\047\uffc5\050\uffc5\056\uffc5\057\uffc5\070\uffc5\074\uffc5" +
    "\001\002\000\004\013\053\001\002\000\032\004\uffcc\005" +
    "\uffcc\006\uffcc\016\uffcc\024\uffcc\041\uffcc\047\uffcc\050\uffcc" +
    "\056\uffcc\057\uffcc\070\uffcc\074\uffcc\001\002\000\032\004" +
    "\uffcd\005\uffcd\006\uffcd\016\uffcd\024\uffcd\041\uffcd\047\uffcd" +
    "\050\uffcd\056\uffcd\057\uffcd\070\uffcd\074\uffcd\001\002\000" +
    "\032\004\uffc8\005\uffc8\006\uffc8\016\uffc8\024\uffc8\041\uffc8" +
    "\047\uffc8\050\uffc8\056\uffc8\057\uffc8\070\uffc8\074\uffc8\001" +
    "\002\000\032\004\uffc6\005\uffc6\006\uffc6\016\uffc6\024\uffc6" +
    "\041\uffc6\047\uffc6\050\uffc6\056\uffc6\057\uffc6\070\uffc6\074" +
    "\uffc6\001\002\000\070\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\014\uffaa\015\uffaa\016\uffaa\024\uffaa\041\uffaa\047" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa\065" +
    "\uffaa\070\uffaa\071\uffaa\074\uffaa\001\002\000\032\004\uffc3" +
    "\005\uffc3\006\uffc3\016\uffc3\024\uffc3\041\uffc3\047\uffc3\050" +
    "\uffc3\056\uffc3\057\uffc3\070\uffc3\074\uffc3\001\002\000\032" +
    "\004\uffca\005\uffca\006\uffca\016\uffca\024\uffca\041\uffca\047" +
    "\uffca\050\uffca\056\uffca\057\uffca\070\uffca\074\uffca\001\002" +
    "\000\142\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5" +
    "\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065" +
    "\uffd5\070\uffd5\071\uffd5\074\uffd5\001\002\000\026\004\023" +
    "\005\016\006\017\041\021\047\015\050\024\056\026\057" +
    "\025\070\020\074\030\001\002\000\054\012\135\017\161" +
    "\023\147\024\146\025\134\026\136\027\150\030\132\031" +
    "\151\032\144\033\133\034\130\035\127\036\141\037\137" +
    "\040\124\042\143\043\125\044\142\045\140\046\131\001" +
    "\002\000\026\004\023\005\016\006\017\041\021\047\015" +
    "\050\024\056\026\057\025\070\020\074\030\001\002\000" +
    "\142\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\056\uffd1\057" +
    "\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\070\uffd1\071\uffd1\074\uffd1\001\002\000\142\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\014\uffcf" +
    "\015\uffcf\016\uffcf\017\uffcf\023\uffcf\024\uffcf\025\uffcf\026" +
    "\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\070\uffcf\071\uffcf" +
    "\074\uffcf\001\002\000\032\004\023\005\016\006\017\016" +
    "\103\024\075\041\115\047\015\050\024\056\026\057\025" +
    "\070\020\074\030\001\002\000\054\012\135\017\165\023" +
    "\147\024\146\025\134\026\136\027\150\030\132\031\151" +
    "\032\144\033\133\034\130\035\127\036\141\037\137\040" +
    "\124\042\143\043\125\044\142\045\140\046\131\001\002" +
    "\000\004\013\053\001\002\000\070\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\014\uffa4\015\uffa4\016\uffa4\024\uffa4" +
    "\041\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4" +
    "\064\uffa4\065\uffa4\070\uffa4\071\uffa4\074\uffa4\001\002\000" +
    "\072\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\024\uffdc\041\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc\065\uffdc\070" +
    "\uffdc\071\uffdc\074\uffdc\001\002\000\072\004\uffd9\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\011\174\014\uffd9\015\uffd9\016" +
    "\uffd9\024\uffd9\041\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\053\uffd9\054\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\065\uffd9\070\uffd9\071\uffd9\074\uffd9" +
    "\001\002\000\072\004\uffda\005\uffda\006\uffda\007\uffda\010" +
    "\uffda\012\172\014\uffda\015\uffda\016\uffda\024\uffda\041\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\056" +
    "\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda" +
    "\065\uffda\070\uffda\071\uffda\074\uffda\001\002\000\032\004" +
    "\023\005\016\006\017\016\103\024\075\041\115\047\015" +
    "\050\024\056\026\057\025\070\020\074\030\001\002\000" +
    "\140\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\135\014\uffdb\015\uffdb\016\uffdb\023\147\024\uffdb\025" +
    "\134\026\136\027\150\030\132\031\151\032\144\033\133" +
    "\034\130\035\127\036\141\037\137\040\124\041\uffdb\042" +
    "\143\043\125\044\142\045\140\046\131\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\070\uffdb" +
    "\071\uffdb\074\uffdb\001\002\000\004\006\176\001\002\000" +
    "\072\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\024\uffdd\041\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\056\uffdd\057\uffdd" +
    "\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\070" +
    "\uffdd\071\uffdd\074\uffdd\001\002\000\004\012\172\001\002" +
    "\000\066\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec\014" +
    "\uffec\016\uffec\024\uffec\041\uffec\047\uffec\050\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\063\uffec\064\uffec\065\uffec\070\uffec\071\uffec" +
    "\074\uffec\001\002\000\072\002\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\014\uffee\015\uffee\016\uffee\024\uffee" +
    "\041\uffee\047\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee" +
    "\064\uffee\065\uffee\070\uffee\071\uffee\074\uffee\001\002\000" +
    "\054\012\135\017\202\023\147\024\146\025\134\026\136" +
    "\027\150\030\132\031\151\032\144\033\133\034\130\035" +
    "\127\036\141\037\137\040\124\042\143\043\125\044\142" +
    "\045\140\046\131\001\002\000\142\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\017\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\065\uffd3\070\uffd3\071\uffd3\074\uffd3" +
    "\001\002\000\004\073\204\001\002\000\004\016\205\001" +
    "\002\000\034\004\023\005\016\006\017\016\103\017\207" +
    "\024\075\041\115\047\015\050\024\056\026\057\025\070" +
    "\020\074\030\001\002\000\054\012\135\017\210\023\147" +
    "\024\146\025\134\026\136\027\150\030\132\031\151\032" +
    "\144\033\133\034\130\035\127\036\141\037\137\040\124" +
    "\042\143\043\125\044\142\045\140\046\131\001\002\000" +
    "\070\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\024\uff9a\041\uff9a\047\uff9a\050\uff9a\051" +
    "\uff9a\052\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a\070\uff9a\071" +
    "\uff9a\074\uff9a\001\002\000\070\004\uff9b\005\uff9b\006\uff9b" +
    "\007\uff9b\010\uff9b\014\uff9b\015\uff9b\016\uff9b\024\uff9b\041" +
    "\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b" +
    "\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064" +
    "\uff9b\065\uff9b\070\uff9b\071\uff9b\074\uff9b\001\002\000\072" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\024\ufff5\041\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\070\ufff5" +
    "\071\ufff5\074\ufff5\001\002\000\070\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\014\uffeb\015\213\016\uffeb\024\uffeb" +
    "\041\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\070\uffeb\071\uffeb\074\uffeb\001\002\000" +
    "\066\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\014\uffed" +
    "\016\uffed\024\uffed\041\uffed\047\uffed\050\uffed\051\uffed\052" +
    "\uffed\053\uffed\054\uffed\056\uffed\057\uffed\060\uffed\061\uffed" +
    "\062\uffed\063\uffed\064\uffed\065\uffed\070\uffed\071\uffed\074" +
    "\uffed\001\002\000\026\004\023\005\016\006\017\041\021" +
    "\047\015\050\024\056\026\057\025\070\020\074\030\001" +
    "\002\000\054\012\135\017\216\023\147\024\146\025\134" +
    "\026\136\027\150\030\132\031\151\032\144\033\133\034" +
    "\130\035\127\036\141\037\137\040\124\042\143\043\125" +
    "\044\142\045\140\046\131\001\002\000\142\004\uffd2\005" +
    "\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\070\uffd2\071\uffd2" +
    "\074\uffd2\001\002\000\004\063\220\001\002\000\004\016" +
    "\221\001\002\000\032\004\023\005\016\006\017\016\103" +
    "\024\075\041\115\047\015\050\024\056\026\057\025\070" +
    "\020\074\030\001\002\000\054\012\135\017\223\023\147" +
    "\024\146\025\134\026\136\027\150\030\132\031\151\032" +
    "\144\033\133\034\130\035\127\036\141\037\137\040\124" +
    "\042\143\043\125\044\142\045\140\046\131\001\002\000" +
    "\070\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\024\uffa3\041\uffa3\047\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3" +
    "\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\070\uffa3\071" +
    "\uffa3\074\uffa3\001\002\000\070\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\014\ufffb\015\ufffb\016\ufffb\024\ufffb\041" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\070\ufffb\071\ufffb\074\ufffb\001\002\000\070" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\014\ufffa\015" +
    "\ufffa\016\ufffa\024\ufffa\041\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\052\ufffa\053\ufffa\054\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\070\ufffa\071\ufffa" +
    "\074\ufffa\001\002\000\010\052\100\053\076\054\120\001" +
    "\002\000\004\015\233\001\002\000\004\017\231\001\002" +
    "\000\004\013\053\001\002\000\070\004\uffa6\005\uffa6\006" +
    "\uffa6\007\uffa6\010\uffa6\014\uffa6\015\uffa6\016\uffa6\024\uffa6" +
    "\041\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6" +
    "\064\uffa6\065\uffa6\070\uffa6\071\uffa6\074\uffa6\001\002\000" +
    "\032\004\023\005\016\006\017\016\103\024\075\041\115" +
    "\047\015\050\024\056\026\057\025\070\020\074\030\001" +
    "\002\000\054\012\135\015\235\023\147\024\146\025\134" +
    "\026\136\027\150\030\132\031\151\032\144\033\133\034" +
    "\130\035\127\036\141\037\137\040\124\042\143\043\125" +
    "\044\142\045\140\046\131\001\002\000\032\004\023\005" +
    "\016\006\017\016\103\024\075\041\115\047\015\050\024" +
    "\056\026\057\025\070\020\074\030\001\002\000\054\012" +
    "\135\017\uffa5\023\147\024\146\025\134\026\136\027\150" +
    "\030\132\031\151\032\144\033\133\034\130\035\127\036" +
    "\141\037\137\040\124\042\143\043\125\044\142\045\140" +
    "\046\131\001\002\000\026\004\023\005\016\006\017\041" +
    "\021\047\015\050\024\056\026\057\025\070\020\074\030" +
    "\001\002\000\004\017\241\001\002\000\004\013\242\001" +
    "\002\000\004\067\244\001\002\000\006\066\255\067\244" +
    "\001\002\000\026\004\023\005\016\006\017\041\021\047" +
    "\015\050\024\056\026\057\025\070\020\074\030\001\002" +
    "\000\006\066\uffa0\067\uffa0\001\002\000\004\020\247\001" +
    "\002\000\064\004\023\005\016\006\110\007\113\010\102" +
    "\016\103\024\075\041\115\047\015\050\024\051\006\052" +
    "\100\053\076\054\120\056\026\057\025\060\070\061\056" +
    "\062\064\063\112\064\074\065\061\070\251\071\101\074" +
    "\030\001\002\000\064\004\023\005\016\006\110\007\113" +
    "\010\102\016\103\024\075\041\115\047\015\050\024\051" +
    "\006\052\100\053\076\054\120\056\026\057\025\060\070" +
    "\061\056\062\064\063\112\064\074\065\061\070\253\071" +
    "\101\074\030\001\002\000\140\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\012\uffb6\015\252\016\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056\uffb6\057" +
    "\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6" +
    "\066\uff9c\067\uff9c\070\uffb6\071\uffb6\074\uffb6\001\002\000" +
    "\006\066\uff9d\067\uff9d\001\002\000\140\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\012\uffb6\015\254\016\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6" +
    "\065\uffb6\066\uff9f\067\uff9f\070\uffb6\071\uffb6\074\uffb6\001" +
    "\002\000\006\066\uff9e\067\uff9e\001\002\000\004\020\257" +
    "\001\002\000\006\066\uffa1\067\uffa1\001\002\000\064\004" +
    "\023\005\016\006\110\007\113\010\102\016\103\024\075" +
    "\041\115\047\015\050\024\051\006\052\100\053\076\054" +
    "\120\056\026\057\025\060\070\061\056\062\064\063\112" +
    "\064\074\065\061\070\020\071\101\074\030\001\002\000" +
    "\066\004\023\005\016\006\110\007\113\010\102\014\261" +
    "\016\103\024\075\041\115\047\015\050\024\051\006\052" +
    "\100\053\076\054\120\056\026\057\025\060\070\061\056" +
    "\062\064\063\112\064\074\065\061\070\020\071\101\074" +
    "\030\001\002\000\070\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\014\uffa2\015\uffa2\016\uffa2\024\uffa2\041\uffa2\047" +
    "\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\056\uffa2" +
    "\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065" +
    "\uffa2\070\uffa2\071\uffa2\074\uffa2\001\002\000\004\016\uffa7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\016\002\011\003\006\004\007\005\003\034" +
    "\010\040\004\001\001\000\002\001\001\000\004\036\177" +
    "\001\001\000\002\001\001\000\012\004\047\005\003\034" +
    "\010\040\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\021\037" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\051\001\001\000\002\001\001\000\054\005" +
    "\104\006\076\007\105\010\062\011\110\012\061\013\113" +
    "\014\120\015\106\016\070\023\066\024\071\025\116\026" +
    "\115\031\072\033\054\034\057\035\064\040\103\041\065" +
    "\042\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\223\042\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\005" +
    "\104\007\211\010\062\011\110\012\061\013\113\014\120" +
    "\015\106\016\070\023\066\024\071\025\116\026\115\031" +
    "\072\033\054\034\057\035\064\040\103\041\065\042\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\061\016\200\001\001\000\004\036\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\167\020\166\001\001\000\002\001\001\000\004\021\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\122\012" +
    "\061\016\070\033\054\001\001\000\004\021\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\061\016" +
    "\070\033\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\036\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\061\016" +
    "\156\001\001\000\004\021\157\001\001\000\004\012\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\163\012\061\016\070\033\054\001\001\000\004\021\125" +
    "\001\001\000\004\036\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\172\012\061\016\070\033\054\001\001\000\004\021" +
    "\125\001\001\000\004\020\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\011\205\012\061\016\070\033" +
    "\054\001\001\000\004\021\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\061\016\214\001\001\000\004" +
    "\021\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\011\221\012\061\016\070\033\054" +
    "\001\001\000\004\021\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\226\015\106" +
    "\032\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\231\001\001\000\002\001\001\000\012\011\233" +
    "\012\061\016\070\033\054\001\001\000\004\021\125\001" +
    "\001\000\012\011\235\012\061\016\070\033\054\001\001" +
    "\000\004\021\125\001\001\000\004\012\237\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\242\030\244" +
    "\001\001\000\004\030\255\001\001\000\004\012\245\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\005\104" +
    "\006\247\007\105\010\062\011\110\012\061\013\113\014" +
    "\120\015\106\016\070\023\066\024\071\025\116\026\115" +
    "\031\072\033\054\034\057\035\064\040\103\041\065\042" +
    "\053\001\001\000\052\005\104\007\211\010\062\011\110" +
    "\012\061\013\113\014\120\015\106\016\070\023\066\024" +
    "\071\025\116\026\115\031\072\033\054\034\057\035\064" +
    "\040\103\041\065\042\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\005\104\006\257\007" +
    "\105\010\062\011\110\012\061\013\113\014\120\015\106" +
    "\016\070\023\066\024\071\025\116\026\115\031\072\033" +
    "\054\034\057\035\064\040\103\041\065\042\053\001\001" +
    "\000\052\005\104\007\211\010\062\011\110\012\061\013" +
    "\113\014\120\015\106\016\070\023\066\024\071\025\116" +
    "\026\115\031\072\033\054\034\057\035\064\040\103\041" +
    "\065\042\053\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String filePath;
    public HashMap<String, ArrayList<String>> elements;

    public void setFilePath(String path){
        filePath = path;
        elements = new HashMap<String, ArrayList<String>>();
        elements.put("class", new ArrayList<String>());
        elements.put("class-lines", new ArrayList<String>());
        elements.put("method", new ArrayList<String>());
        elements.put("method-params", new ArrayList<String>());
        elements.put("method-lines", new ArrayList<String>());
        elements.put("var", new ArrayList<String>());
        elements.put("comment", new ArrayList<String>());
    }

    public HashMap getElements(){
        return elements;
    }

    public void syntax_error(Symbol s){
        System.err.println("\nError sintactico en la linea " + s.right +
        " columna " + s.left + " componente: " + s.value + ".\n");
        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("\nError sintactico irrecuperable en la linea " +
        s.right + " columna " + s.left + " componente: " + s.value +
        " no reconocido.\n");
        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JSParser$actions {


    public void addElement(String name, String value){
        parser.elements.get(name).add(value);
    }

  private final JSParser parser;

  /** Constructor */
  CUP$JSParser$actions(JSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JSParser$do_action(
    int                        CUP$JSParser$act_num,
    java_cup.runtime.lr_parser CUP$JSParser$parser,
    java.util.Stack            CUP$JSParser$stack,
    int                        CUP$JSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSParser$result;

      /* select the action based on the action number */
      switch (CUP$JSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONSOLESEQ ::= console dot logsym openparenthesis closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CONSOLESEQ ::= console dot logsym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SWITCHSEQCONTENT ::= casesym VARVALUE colom breaksym 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCHSEQCONTENT ::= casesym VARVALUE colom breaksym semicolom 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCHSEQCONTENT ::= casesym VARVALUE colom DECLARATIONS breaksym semicolom 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCHSEQCONTENT ::= casesym VARVALUE colom DECLARATIONS breaksym 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SWITCHSEQCASES ::= SWITCHSEQCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SWITCHSEQCASES ::= SWITCHSEQCASES SWITCHSEQCONTENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SWITCHSEQ ::= switchsym openparenthesis VARVALUE closeparenthesis openbracket SWITCHSEQCASES defaultsym colom DECLARATIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQ",20, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DOWHILESEQ ::= dosym METHODCONTENT whilesym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DOWHILESEQ",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILESEQ ::= whilesym openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("WHILESEQ",18, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FORSEQPARAMS ::= ASSIGNMENT semicolom EXPRESSIONS semicolom EXPRESSIONS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQPARAMS",24, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FORSEQ ::= forsym openparenthesis FORSEQPARAMS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQ",17, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONSTROLSEQSYM ::= elsesym ifsym 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONSTROLSEQSYM ::= elsesym 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONSTROLSEQSYM ::= ifsym 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONTROLSEQ ::= CONSTROLSEQSYM openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONTROLSEQ",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARVALUE ::= requiresym openparenthesis strtext closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARVALUE ::= lessMlessM id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARVALUE ::= plusplus id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARVALUE ::= id lessMlessM 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARVALUE ::= id plusplus 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARVALUE ::= not id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARVALUE ::= not booltrue 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARVALUE ::= not boolfalse 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARVALUE ::= boolfalse 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARVALUE ::= booltrue 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VARVALUE ::= id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // VARVALUE ::= breaksym 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VARVALUE ::= strtext 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VARVALUE ::= decimal 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSIONOPT ::= minor 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSIONOPT ::= major 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSIONOPT ::= lessoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSIONOPT ::= moreoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSIONOPT ::= modeq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSIONOPT ::= diveq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSIONOPT ::= xoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSIONOPT ::= timeseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSIONOPT ::= lesseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSIONOPT ::= pluseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSIONOPT ::= equals equals 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSIONOPT ::= notequals 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSIONOPT ::= xor 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSIONOPT ::= and 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSIONOPT ::= or 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSIONOPT ::= mod 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSIONOPT ::= div 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSIONOPT ::= times times 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSIONOPT ::= times 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSIONOPT ::= lessM 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSIONOPT ::= plus 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSION ::= VARVALUE 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSION ::= EXPRESSION EXPRESSIONOPT VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESSIONGROUP ::= EXPRESSION 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSIONGROUP ::= not openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSIONGROUP ::= lessM openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESSIONGROUP ::= openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESSIONS ::= EXPRESSIONGROUP 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESSIONS ::= EXPRESSIONS EXPRESSIONOPT EXPRESSIONGROUP 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VARTYPE ::= constsym 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VARTYPE ::= let 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VARTYPE ::= var 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGNMENT ::= VARTYPE INLINEASSIGNMENTS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASSIGNMENT ::= VARTYPE id 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addElement("var", varID);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INLINEASSIGNMENT ::= id equals EXPRESSIONS 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    addElement("var", varID);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENT",14, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INLINEASSIGNMENTS ::= INLINEASSIGNMENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INLINEASSIGNMENTS ::= INLINEASSIGNMENTS comma INLINEASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= COMMENTS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= NEWCLASS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= FUNCTIONHEADER 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= CONSOLESEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATION ::= SWITCHSEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= DOWHILESEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= WHILESEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARATION ::= FORSEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARATION ::= CONTROLSEQ 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARATION ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARATIONS ::= DECLARATION 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATIONS ::= DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCTION ::= FUNCTIONHEADER METHODCONTENT 
            {
              Object RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] funcID = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
     addElement("method", funcID[0]);
     addElement("method-params", funcID[1]);
     addElement("method-lines", Integer.toString((int) lines));

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCTIONPARAMS ::= VARVALUE 
            {
              Object RESULT =null;
		
    int defLines = 0;
    RESULT = defLines;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCTIONPARAMS ::= FUNCTIONPARAMS comma VARVALUE 
            {
              Object RESULT =null;
		int countleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object count = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    int vl = (int) count;
    RESULT = ++vl;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCTIONHEADER ::= id openparenthesis closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    String[] paramss = new String[]{funcID, "0"};
    RESULT = paramss;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",30, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCTIONHEADER ::= id openparenthesis FUNCTIONPARAMS closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    String[] paramss = new String[]{funcID, Integer.toString((int) params)};
    RESULT = paramss;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",30, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEWCLASS ::= classsym id METHODCONTENT 
            {
              Object RESULT =null;
		int classIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int classIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String classID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int linesleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int linesright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object lines = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addElement("class", classID);
    addElement("class-lines", Integer.toString((int) lines));

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("NEWCLASS",3, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METHODCONTENT ::= openbracket closebracket 
            {
              Object RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    int lineStart = openLineright;
    int lineEnd = closeLineright;
    RESULT = (int) (lineEnd - lineStart);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",28, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // METHODCONTENT ::= openbracket DECLARATIONS closebracket 
            {
              Object RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    int lineStart = openLineright;
    int lineEnd = closeLineright;
    RESULT = (int) (lineEnd - lineStart);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",28, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MULTICOMMENT ::= mcmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("MULTICOMMENT",32, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMMENT ::= cmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENT",31, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMMENTS ::= MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMMENTS ::= COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMMENTS ::= COMMENTS MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMMENTS ::= COMMENTS COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METHOD ::= FUNCTION 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METHOD ::= NEWCLASS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METHODS ::= METHOD 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METHODS ::= METHODS METHOD 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= METHODS 
            {
              Object RESULT =null;
		


              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		RESULT = start_val;
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSParser$parser.done_parsing();
          return CUP$JSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

