
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 11 02:01:32 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.javascript;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import com.alexsantos.proyecto01.utils.Tools;
import com.alexsantos.proyecto01.analyzer.errors.*;
import com.alexsantos.proyecto01.analyzer.tokens.*;
import com.alexsantos.proyecto01.analyzer.comparator.MethodContent;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 11 02:01:32 CST 2021
  */
public class JSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JSParser() {super();}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\013\004\000\002\013\004\000" +
    "\002\013\003\000\002\013\003\000\002\032\003\000\002" +
    "\033\003\000\002\040\005\000\002\042\002\000\002\040" +
    "\007\000\002\005\005\000\002\030\006\000\002\030\005" +
    "\000\002\041\005\000\002\041\003\000\002\036\004\000" +
    "\002\035\005\000\002\035\004\000\002\035\004\000\002" +
    "\035\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\026\005\000\002\026\003\000\002\027\005\000\002\006" +
    "\004\000\002\006\004\000\002\006\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\007\005\000" +
    "\002\007\003\000\002\025\005\000\002\025\006\000\002" +
    "\025\006\000\002\025\003\000\002\012\005\000\002\012" +
    "\003\000\002\012\004\000\002\012\004\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\004\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\004\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\006\000\002\011\007\000\002\011" +
    "\004\000\002\037\003\000\002\037\004\000\002\020\007" +
    "\000\002\024\007\000\002\024\007\000\002\021\007\000" +
    "\002\022\010\000\002\014\014\000\002\015\004\000\002" +
    "\015\003\000\002\016\007\000\002\016\010\000\002\016" +
    "\007\000\002\016\006\000\002\023\010\000\002\023\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\012\006\006\007\011\010\005\047\013\001" +
    "\002\000\004\013\026\001\002\000\074\002\ufff5\003\ufff5" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\022\ufff5\037\ufff5\045\ufff5\046\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\065\ufff5\066\ufff5" +
    "\071\ufff5\001\002\000\004\016\161\001\002\000\014\002" +
    "\ufffd\006\ufffd\007\ufffd\010\ufffd\047\ufffd\001\002\000\074" +
    "\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\014\ufff8\015\ufff8\016\ufff8\022\ufff8\037\ufff8\045\ufff8" +
    "\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\065\ufff8\066\ufff8\071\ufff8\001\002\000\074\002\ufff6\003" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\014\ufff6" +
    "\015\ufff6\016\ufff6\022\ufff6\037\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\065\ufff6\066" +
    "\ufff6\071\ufff6\001\002\000\014\002\000\006\006\007\011" +
    "\010\005\047\013\001\002\000\004\006\024\001\002\000" +
    "\004\002\023\001\002\000\014\002\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\047\ufffc\001\002\000\074\002\ufff7\003\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\014\ufff7\015\ufff7" +
    "\016\ufff7\022\ufff7\037\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\062\ufff7\065\ufff7\066\ufff7\071" +
    "\ufff7\001\002\000\014\002\ufffb\006\ufffb\007\011\010\005" +
    "\047\ufffb\001\002\000\014\002\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\047\ufffe\001\002\000\074\002\ufff9\003\ufff9\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\014\ufff9\015\ufff9\016" +
    "\ufff9\022\ufff9\037\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\065\ufff9\066\ufff9\071\ufff9" +
    "\001\002\000\074\002\ufffa\003\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\014\ufffa\015\ufffa\016\ufffa\022\ufffa" +
    "\037\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\065\ufffa\066\ufffa\071\ufffa\001\002\000" +
    "\004\002\001\001\002\000\004\013\026\001\002\000\074" +
    "\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\022\ufff1\037\ufff1\045\ufff1" +
    "\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1" +
    "\065\ufff1\066\ufff1\071\ufff1\001\002\000\070\003\062\004" +
    "\100\005\060\006\067\007\011\010\005\014\033\016\057" +
    "\022\047\037\075\045\027\046\073\047\013\050\055\051" +
    "\052\052\102\053\076\054\050\055\043\056\031\057\037" +
    "\060\071\061\051\062\035\065\061\066\056\071\053\001" +
    "\002\000\004\006\274\001\002\000\144\003\uffd1\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\065\uffd1\066" +
    "\uffd1\071\uffd1\001\002\000\006\013\026\055\272\001\002" +
    "\000\072\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\037\uffdd\045\uffdd" +
    "\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054" +
    "\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd" +
    "\065\uffdd\066\uffdd\071\uffdd\001\002\000\004\003\ufff3\001" +
    "\002\000\144\003\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016\uffcb\017" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\062\uffcb\065\uffcb\066\uffcb\071\uffcb\001\002\000" +
    "\004\016\244\001\002\000\072\003\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf\022" +
    "\uffdf\037\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060" +
    "\uffdf\061\uffdf\062\uffdf\065\uffdf\066\uffdf\071\uffdf\001\002" +
    "\000\004\016\231\001\002\000\072\003\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\011\010\005\014\uffdc\015\uffdc\016\uffdc" +
    "\022\uffdc\037\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051" +
    "\uffdc\052\uffdc\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc" +
    "\060\uffdc\061\uffdc\062\uffdc\065\uffdc\066\uffdc\071\uffdc\001" +
    "\002\000\076\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\011\174\014\uffd6\015\uffd6\016\uffd6\017\uffd6\022" +
    "\uffd6\037\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\065\uffd6\066\uffd6\071\uffd6\001\002" +
    "\000\072\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\014\uffe6\015\uffe6\016\uffe6\022\uffe6\037\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054" +
    "\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6" +
    "\065\uffe6\066\uffe6\071\uffe6\001\002\000\004\016\uffa3\001" +
    "\002\000\144\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\uffcd\012\120\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\021\132\022\131\023\117\024\121\025\133\026\115" +
    "\027\134\030\127\031\116\032\113\033\112\034\124\035" +
    "\122\036\107\037\uffcd\040\126\041\110\042\125\043\123" +
    "\044\114\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd" +
    "\061\uffcd\062\uffcd\065\uffcd\066\uffcd\071\uffcd\001\002\000" +
    "\072\003\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\022\uffe2\037\uffe2\045\uffe2\046" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\065" +
    "\uffe2\066\uffe2\071\uffe2\001\002\000\072\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\022\uffe5\037\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057" +
    "\uffe5\060\uffe5\061\uffe5\062\uffe5\065\uffe5\066\uffe5\071\uffe5" +
    "\001\002\000\004\016\226\001\002\000\146\003\uffae\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae" +
    "\014\uffae\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022" +
    "\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037" +
    "\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae" +
    "\046\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\060\uffae\061\uffae\062\uffae" +
    "\065\uffae\066\uffae\071\uffae\001\002\000\004\013\026\001" +
    "\002\000\004\006\uffd4\001\002\000\004\016\216\001\002" +
    "\000\070\003\062\004\100\005\060\006\067\007\011\010" +
    "\005\014\213\016\057\022\047\037\075\045\027\046\073" +
    "\047\013\050\055\051\052\052\102\053\076\054\050\055" +
    "\043\056\031\057\037\060\071\061\051\062\035\065\061" +
    "\066\056\071\053\001\002\000\004\006\uffd5\001\002\000" +
    "\004\067\205\001\002\000\030\003\062\004\100\005\060" +
    "\006\105\037\147\045\027\046\073\053\076\054\050\065" +
    "\061\071\053\001\002\000\146\003\uffb2\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014\uffb2\015" +
    "\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032" +
    "\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2" +
    "\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\065\uffb2\066" +
    "\uffb2\071\uffb2\001\002\000\146\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\065\uffb1\066" +
    "\uffb1\071\uffb1\001\002\000\076\004\100\005\060\006\105" +
    "\012\120\021\132\022\131\023\117\024\121\025\133\026" +
    "\115\027\134\030\127\031\116\032\113\033\112\034\124" +
    "\035\122\036\107\037\147\040\126\041\110\042\125\043" +
    "\123\044\114\045\027\046\073\053\076\054\050\065\061" +
    "\071\053\001\002\000\074\003\uffe1\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\013\026\014\uffe1\015\uffe1\016\uffe1" +
    "\022\uffe1\037\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1" +
    "\060\uffe1\061\uffe1\062\uffe1\065\uffe1\066\uffe1\071\uffe1\001" +
    "\002\000\072\003\uffde\004\uffde\005\uffde\006\uffde\007\uffde" +
    "\010\uffde\014\uffde\015\uffde\016\uffde\022\uffde\037\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062" +
    "\uffde\065\uffde\066\uffde\071\uffde\001\002\000\072\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\014\uffe8\015" +
    "\177\016\uffe8\022\uffe8\037\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056" +
    "\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\065\uffe8\066\uffe8" +
    "\071\uffe8\001\002\000\004\006\173\001\002\000\140\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\162" +
    "\014\uffb0\015\uffb0\016\161\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\141\046\142\047\uffb0" +
    "\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056" +
    "\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\065\uffb0\066\uffb0" +
    "\071\uffb0\001\002\000\140\003\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\120\014\uffe0\015\uffe0\016\uffe0" +
    "\021\132\022\131\023\117\024\121\025\133\026\115\027" +
    "\134\030\127\031\116\032\113\033\112\034\124\035\122" +
    "\036\107\037\uffe0\040\126\041\110\042\125\043\123\044" +
    "\114\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\062\uffe0\065\uffe0\066\uffe0\071\uffe0\001\002\000\004" +
    "\016\155\001\002\000\076\003\uffda\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\014\uffda\015\uffda\016\uffda" +
    "\017\uffda\022\uffda\037\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\065\uffda\066\uffda\071" +
    "\uffda\001\002\000\004\006\154\001\002\000\072\003\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\022\uffe7\037\uffe7\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\065\uffe7\066\uffe7" +
    "\071\uffe7\001\002\000\012\006\146\016\144\053\143\054" +
    "\145\001\002\000\146\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\014\uffaf\015\uffaf\016" +
    "\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033" +
    "\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\057\uffaf\060\uffaf\061\uffaf\062\uffaf\065\uffaf\066\uffaf\071" +
    "\uffaf\001\002\000\072\003\uffe3\004\uffe3\005\uffe3\006\uffe3" +
    "\007\uffe3\010\uffe3\014\uffe3\015\uffe3\016\uffe3\022\uffe3\037" +
    "\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\065\uffe3\066\uffe3\071\uffe3\001\002\000\146" +
    "\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061" +
    "\uffb3\062\uffb3\065\uffb3\066\uffb3\071\uffb3\001\002\000\072" +
    "\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\022\uffe4\037\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\065\uffe4" +
    "\066\uffe4\071\uffe4\001\002\000\004\006\uffd3\001\002\000" +
    "\004\016\104\001\002\000\034\003\062\004\100\005\060" +
    "\006\105\016\057\022\047\037\075\045\027\046\073\053" +
    "\076\054\050\065\061\071\053\001\002\000\146\003\uffb0" +
    "\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0" +
    "\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045" +
    "\141\046\142\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062" +
    "\uffb0\065\uffb0\066\uffb0\071\uffb0\001\002\000\054\012\120" +
    "\017\130\021\132\022\131\023\117\024\121\025\133\026" +
    "\115\027\134\030\127\031\116\032\113\033\112\034\124" +
    "\035\122\036\107\040\126\041\110\042\125\043\123\044" +
    "\114\001\002\000\144\003\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056\uffb8\057\uffb8" +
    "\060\uffb8\061\uffb8\062\uffb8\065\uffb8\066\uffb8\071\uffb8\001" +
    "\002\000\144\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017" +
    "\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\065\uffb4\066\uffb4\071\uffb4\001\002\000" +
    "\034\003\062\004\100\005\060\006\105\016\057\022\047" +
    "\037\075\045\027\046\073\053\076\054\050\065\061\071" +
    "\053\001\002\000\144\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\065\uffbb\066\uffbb\071\uffbb\001" +
    "\002\000\144\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\065\uffbc\066\uffbc\071\uffbc\001\002\000" +
    "\144\003\uffbf\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053" +
    "\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf" +
    "\062\uffbf\065\uffbf\066\uffbf\071\uffbf\001\002\000\144\003" +
    "\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\065\uffc2\066\uffc2\071\uffc2\001\002\000\144\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\014\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055" +
    "\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\065\uffbd" +
    "\066\uffbd\071\uffbd\001\002\000\144\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\065\uffc6\066\uffc6" +
    "\071\uffc6\001\002\000\004\012\136\001\002\000\144\003" +
    "\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4" +
    "\012\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4" +
    "\065\uffc4\066\uffc4\071\uffc4\001\002\000\144\003\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\065\uffb9" +
    "\066\uffb9\071\uffb9\001\002\000\144\003\uffb6\004\uffb6\005" +
    "\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\057\uffb6\060\uffb6\061\uffb6\062\uffb6\065\uffb6\066\uffb6" +
    "\071\uffb6\001\002\000\144\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\065\uffba\066\uffba\071\uffba" +
    "\001\002\000\144\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\065\uffb7\066\uffb7\071\uffb7\001\002" +
    "\000\144\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\065\uffb5\066\uffb5\071\uffb5\001\002\000\144" +
    "\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011" +
    "\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0" +
    "\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062" +
    "\uffc0\065\uffc0\066\uffc0\071\uffc0\001\002\000\004\013\026" +
    "\001\002\000\144\003\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\065\uffc7\066\uffc7\071\uffc7\001\002" +
    "\000\144\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061" +
    "\uffc8\062\uffc8\065\uffc8\066\uffc8\071\uffc8\001\002\000\144" +
    "\003\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\065\uffc3\066\uffc3\071\uffc3\001\002\000\144\003\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\065" +
    "\uffc1\066\uffc1\071\uffc1\001\002\000\072\003\uffa5\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\022\uffa5\037\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5" +
    "\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057" +
    "\uffa5\060\uffa5\061\uffa5\062\uffa5\065\uffa5\066\uffa5\071\uffa5" +
    "\001\002\000\144\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043" +
    "\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\065\uffbe\066\uffbe\071\uffbe\001\002" +
    "\000\144\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5" +
    "\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061" +
    "\uffc5\062\uffc5\065\uffc5\066\uffc5\071\uffc5\001\002\000\144" +
    "\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\065\uffd2\066\uffd2\071\uffd2\001\002\000\146\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa" +
    "\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045" +
    "\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa" +
    "\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062" +
    "\uffaa\065\uffaa\066\uffaa\071\uffaa\001\002\000\146\003\uffa9" +
    "\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9\012" +
    "\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062" +
    "\uffa9\065\uffa9\066\uffa9\071\uffa9\001\002\000\146\003\uffac" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\014\uffac\015\uffac\016\uffac\017\uffac\020\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\047\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062" +
    "\uffac\065\uffac\066\uffac\071\uffac\001\002\000\030\003\062" +
    "\004\100\005\060\006\105\037\147\045\027\046\073\053" +
    "\076\054\050\065\061\071\053\001\002\000\146\003\uffad" +
    "\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012" +
    "\uffad\014\uffad\015\uffad\016\uffad\017\uffad\020\uffad\021\uffad" +
    "\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad" +
    "\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\047\uffad\050\uffad\051\uffad\052\uffad\053\uffad" +
    "\054\uffad\055\uffad\056\uffad\057\uffad\060\uffad\061\uffad\062" +
    "\uffad\065\uffad\066\uffad\071\uffad\001\002\000\146\003\uffab" +
    "\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab\012" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab" +
    "\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\065\uffab\066\uffab\071\uffab\001\002\000\010\006\146" +
    "\053\143\054\145\001\002\000\054\012\120\017\152\021" +
    "\132\022\131\023\117\024\121\025\133\026\115\027\134" +
    "\030\127\031\116\032\113\033\112\034\124\035\122\036" +
    "\107\040\126\041\110\042\125\043\123\044\114\001\002" +
    "\000\026\004\100\005\060\006\105\037\147\045\027\046" +
    "\073\053\076\054\050\065\061\071\053\001\002\000\144" +
    "\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce\011" +
    "\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce\021\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce" +
    "\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062" +
    "\uffce\065\uffce\066\uffce\071\uffce\001\002\000\144\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031" +
    "\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\065" +
    "\uffcc\066\uffcc\071\uffcc\001\002\000\146\003\uffa7\004\uffa7" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7" +
    "\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\065" +
    "\uffa7\066\uffa7\071\uffa7\001\002\000\034\003\062\004\100" +
    "\005\060\006\105\016\057\022\047\037\075\045\027\046" +
    "\073\053\076\054\050\065\061\071\053\001\002\000\054" +
    "\012\120\017\157\021\132\022\131\023\117\024\121\025" +
    "\133\026\115\027\134\030\127\031\116\032\113\033\112" +
    "\034\124\035\122\036\107\040\126\041\110\042\125\043" +
    "\123\044\114\001\002\000\004\013\026\001\002\000\072" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\014" +
    "\uff9e\015\uff9e\016\uff9e\022\uff9e\037\uff9e\045\uff9e\046\uff9e" +
    "\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055" +
    "\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\065\uff9e" +
    "\066\uff9e\071\uff9e\001\002\000\036\003\062\004\100\005" +
    "\060\006\105\016\057\017\165\022\047\037\075\045\027" +
    "\046\073\053\076\054\050\065\061\071\053\001\002\000" +
    "\034\003\062\004\100\005\060\006\105\016\057\022\047" +
    "\037\075\045\027\046\073\053\076\054\050\065\061\071" +
    "\053\001\002\000\144\003\uffd9\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\011\uffd9\012\120\014\uffd9\015\uffd9\016" +
    "\uffd9\017\uffd9\021\132\022\uffd9\023\117\024\121\025\133" +
    "\026\115\027\134\030\127\031\116\032\113\033\112\034" +
    "\124\035\122\036\107\037\uffd9\040\126\041\110\042\125" +
    "\043\123\044\114\045\uffd9\046\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\062\uffd9\065\uffd9\066\uffd9\071\uffd9\001" +
    "\002\000\056\011\uffed\012\120\017\uffed\021\132\022\131" +
    "\023\117\024\121\025\133\026\115\027\134\030\127\031" +
    "\116\032\113\033\112\034\124\035\122\036\107\040\126" +
    "\041\110\042\125\043\123\044\114\001\002\000\074\003" +
    "\uffef\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\022\uffef\037\uffef\045\uffef\046" +
    "\uffef\047\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\065" +
    "\uffef\066\uffef\071\uffef\001\002\000\006\011\167\017\170" +
    "\001\002\000\034\003\062\004\100\005\060\006\105\016" +
    "\057\022\047\037\075\045\027\046\073\053\076\054\050" +
    "\065\061\071\053\001\002\000\074\003\ufff0\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\022\ufff0\037\ufff0\045\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\065\ufff0\066\ufff0\071" +
    "\ufff0\001\002\000\056\011\uffee\012\120\017\uffee\021\132" +
    "\022\131\023\117\024\121\025\133\026\115\027\134\030" +
    "\127\031\116\032\113\033\112\034\124\035\122\036\107" +
    "\040\126\041\110\042\125\043\123\044\114\001\002\000" +
    "\076\003\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7" +
    "\011\174\014\uffd7\015\uffd7\016\uffd7\017\uffd7\022\uffd7\037" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\065\uffd7\066\uffd7\071\uffd7\001\002\000\076" +
    "\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\012" +
    "\162\014\uffd8\015\uffd8\016\uffd8\017\uffd8\022\uffd8\037\uffd8" +
    "\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8" +
    "\062\uffd8\065\uffd8\066\uffd8\071\uffd8\001\002\000\004\006" +
    "\176\001\002\000\076\003\uffdb\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\016\uffdb\017" +
    "\uffdb\022\uffdb\037\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\060\uffdb\061\uffdb\062\uffdb\065\uffdb\066\uffdb\071\uffdb" +
    "\001\002\000\004\012\162\001\002\000\070\003\uffe9\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\014\uffe9\016\uffe9" +
    "\022\uffe9\037\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051" +
    "\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\062\uffe9\065\uffe9\066\uffe9\071\uffe9\001" +
    "\002\000\074\002\uffec\003\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\014\uffec\015\uffec\016\uffec\022\uffec\037" +
    "\uffec\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec" +
    "\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\062\uffec\065\uffec\066\uffec\071\uffec\001\002\000\144" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062" +
    "\uffc9\065\uffc9\066\uffc9\071\uffc9\001\002\000\144\003\uffca" +
    "\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045\uffca\046" +
    "\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca" +
    "\055\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\065" +
    "\uffca\066\uffca\071\uffca\001\002\000\054\012\120\017\204" +
    "\021\132\022\131\023\117\024\121\025\133\026\115\027" +
    "\134\030\127\031\116\032\113\033\112\034\124\035\122" +
    "\036\107\040\126\041\110\042\125\043\123\044\114\001" +
    "\002\000\144\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0" +
    "\010\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0" +
    "\061\uffd0\062\uffd0\065\uffd0\066\uffd0\071\uffd0\001\002\000" +
    "\004\070\206\001\002\000\004\016\207\001\002\000\036" +
    "\003\062\004\100\005\060\006\105\016\057\017\211\022" +
    "\047\037\075\045\027\046\073\053\076\054\050\065\061" +
    "\071\053\001\002\000\054\012\120\017\212\021\132\022" +
    "\131\023\117\024\121\025\133\026\115\027\134\030\127" +
    "\031\116\032\113\033\112\034\124\035\122\036\107\040" +
    "\126\041\110\042\125\043\123\044\114\001\002\000\072" +
    "\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\014" +
    "\uff94\015\uff94\016\uff94\022\uff94\037\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\065\uff94" +
    "\066\uff94\071\uff94\001\002\000\072\003\uff95\004\uff95\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\014\uff95\015\uff95\016\uff95" +
    "\022\uff95\037\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051" +
    "\uff95\052\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\065\uff95\066\uff95\071\uff95\001" +
    "\002\000\074\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\014\ufff4\015\ufff4\016\ufff4\022\ufff4\037" +
    "\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061" +
    "\ufff4\062\ufff4\065\ufff4\066\ufff4\071\ufff4\001\002\000\072" +
    "\003\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\014" +
    "\uffea\015\215\016\uffea\022\uffea\037\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\065\uffea" +
    "\066\uffea\071\uffea\001\002\000\070\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\014\uffeb\016\uffeb\022\uffeb" +
    "\037\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\065\uffeb\066\uffeb\071\uffeb\001\002\000" +
    "\004\005\217\001\002\000\004\017\220\001\002\000\146" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6" +
    "\021\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026\uffa6\027" +
    "\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044" +
    "\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6" +
    "\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061" +
    "\uffa6\062\uffa6\065\uffa6\066\uffa6\071\uffa6\001\002\000\004" +
    "\060\222\001\002\000\004\016\223\001\002\000\034\003" +
    "\062\004\100\005\060\006\105\016\057\022\047\037\075" +
    "\045\027\046\073\053\076\054\050\065\061\071\053\001" +
    "\002\000\054\012\120\017\225\021\132\022\131\023\117" +
    "\024\121\025\133\026\115\027\134\030\127\031\116\032" +
    "\113\033\112\034\124\035\122\036\107\040\126\041\110" +
    "\042\125\043\123\044\114\001\002\000\072\003\uff9d\004" +
    "\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\022\uff9d\037\uff9d\045\uff9d\046\uff9d\047\uff9d\050" +
    "\uff9d\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\057\uff9d\060\uff9d\061\uff9d\062\uff9d\065\uff9d\066\uff9d\071" +
    "\uff9d\001\002\000\030\003\062\004\100\005\060\006\105" +
    "\037\147\045\027\046\073\053\076\054\050\065\061\071" +
    "\053\001\002\000\054\012\120\017\230\021\132\022\131" +
    "\023\117\024\121\025\133\026\115\027\134\030\127\031" +
    "\116\032\113\033\112\034\124\035\122\036\107\040\126" +
    "\041\110\042\125\043\123\044\114\001\002\000\144\003" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf" +
    "\065\uffcf\066\uffcf\071\uffcf\001\002\000\012\006\176\050" +
    "\055\051\052\052\102\001\002\000\004\015\236\001\002" +
    "\000\004\017\234\001\002\000\004\013\026\001\002\000" +
    "\072\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\022\uffa1\037\uffa1\045\uffa1\046" +
    "\uffa1\047\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\065" +
    "\uffa1\066\uffa1\071\uffa1\001\002\000\034\003\062\004\100" +
    "\005\060\006\105\016\057\022\047\037\075\045\027\046" +
    "\073\053\076\054\050\065\061\071\053\001\002\000\054" +
    "\012\120\015\240\021\132\022\131\023\117\024\121\025" +
    "\133\026\115\027\134\030\127\031\116\032\113\033\112" +
    "\034\124\035\122\036\107\040\126\041\110\042\125\043" +
    "\123\044\114\001\002\000\042\003\062\004\100\005\060" +
    "\006\241\016\057\022\047\037\075\045\027\046\073\050" +
    "\055\051\052\052\102\053\076\054\050\065\061\071\053" +
    "\001\002\000\060\012\162\017\uffb0\021\uffb0\022\uffb0\023" +
    "\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\044\uffb0\045\141\046\142\001\002" +
    "\000\054\012\120\017\uffa0\021\132\022\131\023\117\024" +
    "\121\025\133\026\115\027\134\030\127\031\116\032\113" +
    "\033\112\034\124\035\122\036\107\040\126\041\110\042" +
    "\125\043\123\044\114\001\002\000\004\017\uff9f\001\002" +
    "\000\026\004\100\005\060\006\105\037\147\045\027\046" +
    "\073\053\076\054\050\065\061\071\053\001\002\000\004" +
    "\017\246\001\002\000\004\013\247\001\002\000\004\064" +
    "\251\001\002\000\006\063\262\064\251\001\002\000\026" +
    "\004\100\005\060\006\105\037\147\045\027\046\073\053" +
    "\076\054\050\065\061\071\053\001\002\000\006\063\uff9a" +
    "\064\uff9a\001\002\000\004\020\254\001\002\000\066\003" +
    "\062\004\100\005\060\006\067\007\011\010\005\016\057" +
    "\022\047\037\075\045\027\046\073\047\013\050\055\051" +
    "\052\052\102\053\076\054\050\055\043\056\031\057\037" +
    "\060\071\061\051\062\035\065\256\066\056\071\053\001" +
    "\002\000\066\003\062\004\100\005\060\006\067\007\011" +
    "\010\005\016\057\022\047\037\075\045\027\046\073\047" +
    "\013\050\055\051\052\052\102\053\076\054\050\055\043" +
    "\056\031\057\037\060\071\061\051\062\035\065\260\066" +
    "\056\071\053\001\002\000\142\003\uffb1\004\uffb1\005\uffb1" +
    "\006\uffb1\007\uffb1\010\uffb1\012\uffb1\015\257\016\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uff96\064\uff96\065\uffb1\066\uffb1\071\uffb1\001" +
    "\002\000\006\063\uff97\064\uff97\001\002\000\142\003\uffb1" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012\uffb1\015" +
    "\261\016\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1" +
    "\043\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uff99\064\uff99\065\uffb1\066" +
    "\uffb1\071\uffb1\001\002\000\006\063\uff98\064\uff98\001\002" +
    "\000\004\020\264\001\002\000\006\063\uff9b\064\uff9b\001" +
    "\002\000\066\003\062\004\100\005\060\006\067\007\011" +
    "\010\005\016\057\022\047\037\075\045\027\046\073\047" +
    "\013\050\055\051\052\052\102\053\076\054\050\055\043" +
    "\056\031\057\037\060\071\061\051\062\035\065\061\066" +
    "\056\071\053\001\002\000\070\003\062\004\100\005\060" +
    "\006\067\007\011\010\005\014\266\016\057\022\047\037" +
    "\075\045\027\046\073\047\013\050\055\051\052\052\102" +
    "\053\076\054\050\055\043\056\031\057\037\060\071\061" +
    "\051\062\035\065\061\066\056\071\053\001\002\000\072" +
    "\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\014" +
    "\uff9c\015\uff9c\016\uff9c\022\uff9c\037\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\065\uff9c" +
    "\066\uff9c\071\uff9c\001\002\000\004\003\270\001\002\000" +
    "\004\013\271\001\002\000\074\002\ufff2\003\ufff2\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\022\ufff2\037\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\065\ufff2\066\ufff2\071\ufff2" +
    "\001\002\000\004\016\uffa2\001\002\000\072\003\uffa4\004" +
    "\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\014\uffa4\015\uffa4" +
    "\016\uffa4\022\uffa4\037\uffa4\045\uffa4\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\060\uffa4\061\uffa4\062\uffa4\065\uffa4\066\uffa4\071" +
    "\uffa4\001\002\000\146\003\uffa8\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\011\uffa8\012\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8" +
    "\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8" +
    "\057\uffa8\060\uffa8\061\uffa8\062\uffa8\065\uffa8\066\uffa8\071" +
    "\uffa8\001\002\000\014\002\uffff\006\uffff\007\uffff\010\uffff" +
    "\047\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\273\000\024\002\013\003\011\004\017\005\006\013" +
    "\016\030\003\032\015\033\007\036\014\001\001\000\004" +
    "\040\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\274\005\006\013\016\030\003\032\015\033\007\036" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\020\033\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\024\001\001\000\002\001" +
    "\001\000\060\005\063\006\035\007\067\010\033\011\073" +
    "\012\043\013\037\014\076\020\041\021\045\022\100\023" +
    "\044\025\027\026\040\027\071\030\062\031\064\032\015" +
    "\033\007\034\065\035\053\036\031\037\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\272\001\001" +
    "\000\002\001\001\000\004\042\266\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\032\020\033\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\150\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\056\005\063\006\035\007\067\010" +
    "\033\011\073\012\043\013\037\014\076\020\041\021\045" +
    "\022\100\023\044\025\027\026\040\027\071\030\062\031" +
    "\213\032\015\033\007\034\065\036\031\037\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\033\012" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\201\017\200\001\001\000\004\040\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\171\027\071" +
    "\001\001\000\002\001\001\000\004\017\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\105\010\033\012\043\025" +
    "\027\001\001\000\002\001\001\000\004\017\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\033\012" +
    "\043\025\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\033\012\147" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\150\001\001\000\004\010\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\155\010\033\012\043\025\027\001\001\000\004" +
    "\017\110\001\001\000\004\040\157\001\001\000\002\001" +
    "\001\000\014\007\163\010\033\012\043\025\027\041\165" +
    "\001\001\000\012\007\162\010\033\012\043\025\027\001" +
    "\001\000\004\017\110\001\001\000\004\017\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\170\010" +
    "\033\012\043\025\027\001\001\000\002\001\001\000\004" +
    "\017\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\207\010" +
    "\033\012\043\025\027\001\001\000\004\017\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\223\010\033\012\043\025\027\001\001" +
    "\000\004\017\110\001\001\000\002\001\001\000\006\010" +
    "\033\012\226\001\001\000\004\017\150\001\001\000\002" +
    "\001\001\000\014\006\231\024\232\026\040\027\071\034" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\234\001\001\000\002\001\001\000\012\007\236\010" +
    "\033\012\043\025\027\001\001\000\004\017\110\001\001" +
    "\000\022\006\242\007\241\010\033\012\043\025\027\026" +
    "\040\027\071\034\065\001\001\000\002\001\001\000\004" +
    "\017\110\001\001\000\002\001\001\000\004\010\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\247" +
    "\016\251\001\001\000\004\016\262\001\001\000\004\010" +
    "\252\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\005\063\006\035\007\067\010\033\011\073\012\043\013" +
    "\037\014\076\020\041\021\045\022\100\023\044\025\027" +
    "\026\040\027\071\030\062\031\064\032\015\033\007\034" +
    "\065\035\254\036\031\037\102\001\001\000\056\005\063" +
    "\006\035\007\067\010\033\011\073\012\043\013\037\014" +
    "\076\020\041\021\045\022\100\023\044\025\027\026\040" +
    "\027\071\030\062\031\213\032\015\033\007\034\065\036" +
    "\031\037\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\005\063\006\035\007\067\010\033" +
    "\011\073\012\043\013\037\014\076\020\041\021\045\022" +
    "\100\023\044\025\027\026\040\027\071\030\062\031\064" +
    "\032\015\033\007\034\065\035\264\036\031\037\102\001" +
    "\001\000\056\005\063\006\035\007\067\010\033\011\073" +
    "\012\043\013\037\014\076\020\041\021\045\022\100\023" +
    "\044\025\027\026\040\027\071\030\062\031\213\032\015" +
    "\033\007\034\065\036\031\037\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String filePath;
    public HashMap<String, ArrayList<String>> elements;

    public void setFilePath (String path) {
        filePath = path;
        elements = new HashMap<String, ArrayList<String>>();

        elements.put("method-params", new ArrayList<String>());
        elements.put("method-lines", new ArrayList<String>());
        elements.put("class-method", new ArrayList<String>());
        elements.put("class-lines", new ArrayList<String>());
        elements.put("comment", new ArrayList<String>());
        elements.put("method", new ArrayList<String>());
        elements.put("class", new ArrayList<String>());
        elements.put("var", new ArrayList<String>());
    }

    public HashMap getElements () {
        return elements;
    }

    public void syntax_error (Symbol s) {
        System.err.println("\nError sintactico en la linea " + s.right +
        " columna " + s.left + " componente: " + s.value + ".\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.err.println("\nError sintactico irrecuperable en la linea " +
        s.right + " columna " + s.left + " componente: " + s.value +
        " no reconocido.\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JSParser$actions {


    public void addElement (String name, String value) {
        parser.elements.get(name).add(value);
    }

    public void addClassMethod (String classID, MethodContent content) {
        for (int contentIndex = 0;
            contentIndex < content.list.size();
            contentIndex++) {
            String[] declaration = content.list.get(contentIndex);
            if (declaration[0].equals("method")) {
               int methodStart = Integer.parseInt(declaration[1]);
               if (methodStart >= content.lineStart
                    && methodStart < content.lineEnd) {
                 addElement("class-method", classID + "-" + declaration[2]);
               }
            }
        }
    }

    public void addToken (String lex, String key, int line, int col) {
        TokensHandler tokens = TokensHandler.getInstance();
        tokens.add(parser.filePath, lex, key, line, col);
    }

  private final JSParser parser;

  /** Constructor */
  CUP$JSParser$actions(JSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JSParser$do_action(
    int                        CUP$JSParser$act_num,
    java_cup.runtime.lr_parser CUP$JSParser$parser,
    java.util.Stack            CUP$JSParser$stack,
    int                        CUP$JSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSParser$result;

      /* select the action based on the action number */
      switch (CUP$JSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // CONSOLESEQ ::= console dot logsym openparenthesis closeparenthesis 
            {
              Object RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int logsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int logsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object logs = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("console", "console", clsright, clsleft);
    addToken("dot", ".", dright, dleft);
    addToken("log", "log", logsright, logsleft);
    addToken("openparenthesis", "(", c1right, c1left);
    addToken("closeparenthesis", ")", c2right, c2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",17, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // CONSOLESEQ ::= console dot logsym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;
		int clsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).right;
		Object cls = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int logsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int logsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object logs = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("console", "console", clsright, clsleft);
    addToken("dot", ".", dright, dleft);
    addToken("log", "log", logsright, logsleft);
    addToken("openparenthesis", "(", c1right, c1left);
    addToken("closeparenthesis", ")", c2right, c2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",17, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // SWITCHSEQCONTENT ::= casesym VARVALUE colom breaksym 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("casesym", "case", symright, symleft);
    addToken("colom", ":", colsright, colsleft);
    addToken("breaksym", "break", brright, brleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // SWITCHSEQCONTENT ::= casesym VARVALUE colom breaksym semicolom 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("casesym", "case", symright, symleft);
    addToken("colom", ":", colsright, colsleft);
    addToken("breaksym", "break", brright, brleft);
    addToken("semicolom", ";", smright, smleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SWITCHSEQCONTENT ::= casesym VARVALUE colom DECLARATIONS breaksym semicolom 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int smleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int smright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object sm = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("casesym", "case", symright, symleft);
    addToken("colom", ":", colsright, colsleft);
    addToken("breaksym", "break", brright, brleft);
    addToken("semicolom", ";", smright, smleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SWITCHSEQCONTENT ::= casesym VARVALUE colom DECLARATIONS breaksym 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int brright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object br = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("casesym", "case", symright, symleft);
    addToken("colom", ":", colsright, colsleft);
    addToken("breaksym", "break", brright, brleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SWITCHSEQCASES ::= SWITCHSEQCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SWITCHSEQCASES ::= SWITCHSEQCASES SWITCHSEQCONTENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SWITCHSEQ ::= switchsym openparenthesis VARVALUE closeparenthesis openbracket SWITCHSEQCASES defaultsym colom DECLARATIONS closebracket 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-8)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-8)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-8)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-6)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-6)).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-6)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).value;
		int defsymleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int defsymright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object defsym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int colsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int colsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object cols = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("switchsym", "switch", symright, symleft);
    addToken("openparenthesis", "(", parright, parleft);
    addToken("closeparenthesis", ")", par2right, par2left);
    addToken("openbracket", "{", b1right, b2left);
    addToken("colom", ":", colsright, colsleft);
    addToken("defaultsym", "default", defsymright, defsymleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQ",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DOWHILESEQ ::= dosym METHODCONTENT whilesym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;
		int dosleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).left;
		int dosright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).right;
		Object dos = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)).value;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("dosym", "do", dosright, dosleft);
    addToken("whilesym", "while", symright, symleft);
    addToken("openparenthesis", "(", parright, parleft);
    addToken("closeparenthesis", ")", par2right, par2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DOWHILESEQ",16, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WHILESEQ ::= whilesym openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("whilesym", "while", symright, symleft);
    addToken("openparenthesis", "(", parright, parleft);
    addToken("closeparenthesis", ")", par2right, par2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("WHILESEQ",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FORSEQPARAMS ::= ASSIGNMENT semicolom EXPRESSIONS semicolom ASSIGNMENT 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("semicolom", ";", s1right, s1left);
    addToken("semicolom", ";", s2right, s2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQPARAMS",18, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FORSEQPARAMS ::= ASSIGNMENT semicolom EXPRESSIONS semicolom EXPRESSIONS 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("semicolom", ";", s1right, s1left);
    addToken("semicolom", ";", s2right, s2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQPARAMS",18, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FORSEQ ::= forsym openparenthesis FORSEQPARAMS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object par = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int par2left = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int par2right = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object par2 = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("forsym", "for", symright, symleft);
    addToken("openparenthesis", "(", parright, parleft);
    addToken("closeparenthesis", ")", par2right, par2left);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQ",14, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONSTROLSEQSYM ::= elsesym ifsym 
            {
              String RESULT =null;
		 RESULT = "else if"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONSTROLSEQSYM ::= ifsym 
            {
              String RESULT =null;
		 RESULT = "if"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTROLSEQ ::= elsesym METHODCONTENT 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("controlsym", "else", symright, symleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONTROLSEQ",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONTROLSEQ ::= CONSTROLSEQSYM openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int symright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		String sym = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		
    addToken("controlsym", sym, symright, symleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONTROLSEQ",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARVALUE ::= requiresym openparenthesis strtext closeparenthesis 
            {
              Object RESULT =null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("require", "require", reqright, reqleft);
    addToken("string", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARVALUE ::= lessMlessM id 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARVALUE ::= plusplus id 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARVALUE ::= id lessMlessM 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARVALUE ::= id plusplus 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARVALUE ::= not id 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARVALUE ::= not booltrue 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("notbool", "!true", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARVALUE ::= not boolfalse 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("notbool", "!false", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARVALUE ::= boolfalse 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("bool", "false", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARVALUE ::= booltrue 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("bool", "true", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARVALUE ::= id 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("id", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARVALUE ::= breaksym 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("break", "break", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARVALUE ::= strtext 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("string", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARVALUE ::= decimal 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("number", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSIONOPT ::= minor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("minor", "-", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSIONOPT ::= major 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("major", ">", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESSIONOPT ::= lessoreq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("lessoreq", "<=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESSIONOPT ::= moreoreq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("moreoreq", ">=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESSIONOPT ::= modeq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("modeq", "%=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSIONOPT ::= diveq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("diveq", "/=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSIONOPT ::= xoreq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("xoreq", "^=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSIONOPT ::= timeseq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("timeseq", "*=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSIONOPT ::= lesseq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("lesseq", "-=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSIONOPT ::= pluseq 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("pluseq", "+=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSIONOPT ::= equals equals 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("equalsequals", "==", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSIONOPT ::= notequals 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("notequals", "!=", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSIONOPT ::= xor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("xors", "^", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSIONOPT ::= and 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("and", "&&", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSIONOPT ::= or 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("or", "||", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSIONOPT ::= mod 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("mod", "%", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSIONOPT ::= div 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("div", "/", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSIONOPT ::= times times 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("timestimes", "**", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSIONOPT ::= times 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("times", "*", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSIONOPT ::= lessM 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("lessM", "-", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSIONOPT ::= plus 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addToken("plus", "+", textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSION ::= error EXPRESSIONOPT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSION ::= error VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSION ::= VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSION ::= EXPRESSION EXPRESSIONOPT VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSION",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSIONGROUP ::= EXPRESSION 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSIONGROUP ::= not openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSIONGROUP ::= lessM openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESSIONGROUP ::= openparenthesis EXPRESSION closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONGROUP",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESSIONS ::= EXPRESSIONGROUP 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESSIONS ::= EXPRESSIONS EXPRESSIONOPT EXPRESSIONGROUP 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VARTYPE ::= constsym 
            {
              String RESULT =null;
		 RESULT = "const"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",26, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VARTYPE ::= let 
            {
              String RESULT =null;
		 RESULT = "let"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",26, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VARTYPE ::= var 
            {
              String RESULT =null;
		 RESULT = "var"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",26, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASSIGNMENT ::= INLINEASSIGNMENTS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASSIGNMENT ::= VARTYPE INLINEASSIGNMENTS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASSIGNMENT ::= VARTYPE id 
            {
              Object RESULT =null;
		int varTextleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int varTextright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String varText = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    addElement("var", varID);
    addToken("id", varID, varIDright, varIDleft);
    addToken("vartype", varText, varTextright, varTextleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INLINEASSIGNMENT ::= id equals EXPRESSIONS 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    addElement("var", varID);
    addToken("id", varID, varIDright, varIDleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENT",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INLINEASSIGNMENTS ::= INLINEASSIGNMENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",20, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INLINEASSIGNMENTS ::= INLINEASSIGNMENTS comma INLINEASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",20, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATION ::= COMMENTS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"comment", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATION ::= FUNCTION 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String line = Integer.toString(funcIDright);
    String[] data = new String[]{"method", line, funcID};
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= NEWCLASS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"class", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= ASSIGNMENT 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"assignment", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= EXPRESSIONS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"exp", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= FUNCTIONHEADER 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"call", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= CONSOLESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"console", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= SWITCHSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"switch", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATION ::= DOWHILESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"dowhile", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= WHILESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"while", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= FORSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"for", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARATION ::= CONTROLSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"control", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARATIONS ::= DECLARATION 
            {
              ArrayList<String[]> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    ArrayList<String[]> list = new ArrayList<String[]>();
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT = list;
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARATIONS ::= DECLARATION semicolom 
            {
              ArrayList<String[]> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    ArrayList<String[]> list = new ArrayList<String[]>();
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT = list;
    RESULT.add(data);
    addToken("semicolom", ";", lineright, lineleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = list;
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    RESULT = list;
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT.add(data);
    addToken("semicolom", ";", lineright, lineleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCTION ::= FUNCTIONHEADER METHODCONTENT 
            {
              String RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] funcID = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		MethodContent content = (MethodContent)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String counter = Integer.toString(content.lineEnd - content.lineStart);
    addElement("method", funcID[0]);
    addElement("method-params", funcID[1]);
    addElement("method-lines", counter);
    RESULT = funcID[0];
    addToken("function", funcID[0], funcIDright, funcIDleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",28, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCTIONPARAMS ::= EXPRESSIONS 
            {
              Object RESULT =null;
		
    int defLines = 0;
    RESULT = defLines;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",31, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCTIONPARAMS ::= FUNCTIONPARAMS comma EXPRESSIONS 
            {
              Object RESULT =null;
		int countleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object count = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    int vl = (int) count;
    RESULT = ++vl;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",31, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCTIONHEADER ::= id openparenthesis closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    String[] paramss = new String[]{funcID, "0"};
    RESULT = paramss;
    addToken("function", funcID, funcIDright, funcIDleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCTIONHEADER ::= id openparenthesis FUNCTIONPARAMS closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    String[] paramss = new String[]{funcID, Integer.toString((int) params)};
    RESULT = paramss;
    addToken("function", funcID, funcIDright, funcIDleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEWCLASS ::= classsym id METHODCONTENT 
            {
              Object RESULT =null;
		int classIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int classIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String classID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		MethodContent content = (MethodContent)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String counter = Integer.toString(content.lineEnd - content.lineStart);
    addElement("class", classID);
    addElement("class-lines", counter);
    addClassMethod(classID, content);
    addToken("class", classID, classIDright, classIDleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("NEWCLASS",3, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODCONTENT ::= openbracket closebracket NT$0 error openbracket 
            {
              MethodContent RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (MethodContent) ((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",30, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$0 ::= 
            {
              MethodContent RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;

    int lineStart = openLineright;
    int lineEnd = closeLineright;

    MethodContent data = new MethodContent(null, lineStart, lineEnd);
    addToken("openbracket", "{", openLineright, openLineleft);
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("NT$0",32, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // METHODCONTENT ::= openbracket DECLARATIONS closebracket 
            {
              MethodContent RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    int lineStart = openLineright;
    int lineEnd = closeLineright;

    MethodContent data = new MethodContent(list, lineStart, lineEnd);
    addToken("openbracket", "{", openLineright, openLineleft);
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",30, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MULTICOMMENT ::= mcmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;
    addToken("multicomment", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("MULTICOMMENT",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMMENT ::= cmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;
    addToken("comment", text, textright, textleft);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENT",24, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMMENTS ::= COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMMENTS ::= MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMMENTS ::= COMMENTS COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMMENTS ::= COMMENTS MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METHOD ::= COMMENTS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METHOD ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METHOD ::= NEWCLASS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METHODS ::= METHOD 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METHODS ::= METHODS METHOD 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= METHODS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		RESULT = start_val;
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSParser$parser.done_parsing();
          return CUP$JSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

