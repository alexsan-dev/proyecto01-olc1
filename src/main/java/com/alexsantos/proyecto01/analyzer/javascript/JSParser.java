
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Sep 12 04:02:49 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.javascript;

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import com.alexsantos.proyecto01.utils.Tools;
import com.alexsantos.proyecto01.analyzer.errors.*;
import com.alexsantos.proyecto01.analyzer.tokens.*;
import com.alexsantos.proyecto01.analyzer.comparator.MethodContent;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Sep 12 04:02:49 CST 2021
  */
public class JSParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JSParser() {super();}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\012\003\000\002\030\003\000\002\031\003\000\002\036" +
    "\005\000\002\036\004\000\002\005\005\000\002\026\006" +
    "\000\002\026\005\000\002\037\005\000\002\037\003\000" +
    "\002\034\004\000\002\033\005\000\002\033\004\000\002" +
    "\033\004\000\002\033\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\005\000\002\025\004\000\002\025\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\003\000\002\007\004\000\002\007\004" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\006\000\002\011\007\000\002" +
    "\011\004\000\002\035\003\000\002\035\004\000\002\017" +
    "\007\000\002\023\007\000\002\023\007\000\002\020\007" +
    "\000\002\021\010\000\002\013\014\000\002\013\011\000" +
    "\002\014\004\000\002\014\003\000\002\015\006\000\002" +
    "\022\010\000\002\022\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\022\003\021\006\013\007\010\010\015\050" +
    "\027\051\026\052\017\053\030\001\002\000\024\002\ufffc" +
    "\003\ufffc\006\ufffc\007\ufffc\010\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\001\002\000\104\002\uffd3\003\uffd3\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\257\015\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\023\uffd3\040\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3" +
    "\065\uffd3\066\uffd3\067\uffd3\072\uffd3\001\002\000\024\002" +
    "\ufffb\003\ufffb\006\ufffb\007\ufffb\010\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\001\002\000\024\002\ufffd\003\ufffd\006" +
    "\ufffd\007\010\010\015\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\001\002\000\100\002\ufff4\003\ufff4\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\015\ufff4\016\ufff4\017\ufff4\023\ufff4" +
    "\040\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\072" +
    "\ufff4\001\002\000\024\002\000\003\021\006\013\007\010" +
    "\010\015\050\027\051\026\052\017\053\030\001\002\000" +
    "\100\002\ufff6\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\015\ufff6\016\ufff6\017\ufff6\023\ufff6\040\ufff6\046" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6" +
    "\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\072\ufff6\001\002" +
    "\000\006\012\152\017\151\001\002\000\024\002\ufffe\003" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\001\002\000\100\002\ufff3\003\ufff3\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\023\ufff3\040\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\052" +
    "\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\061\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\072\ufff3\001\002\000\100\002\ufff5\003\ufff5\004\ufff5" +
    "\005\ufff5\006\ufff5\007\ufff5\010\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\023\ufff5\040\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5" +
    "\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5" +
    "\067\ufff5\072\ufff5\001\002\000\006\003\uffd1\006\uffd1\001" +
    "\002\000\004\013\033\001\002\000\010\012\223\013\262" +
    "\016\164\001\002\000\104\002\uffd9\003\uffd9\004\uffd9\005" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\015\uffd9\016\uffd9" +
    "\017\uffd9\020\uffd9\023\uffd9\040\uffd9\046\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063\uffd9\064\uffd9\065" +
    "\uffd9\066\uffd9\067\uffd9\072\uffd9\001\002\000\004\002\261" +
    "\001\002\000\024\002\ufffa\003\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\001\002\000\006" +
    "\003\217\006\256\001\002\000\006\003\uffd2\006\uffd2\001" +
    "\002\000\004\006\031\001\002\000\006\003\uffd0\006\uffd0" +
    "\001\002\000\004\013\033\001\002\000\100\002\ufff0\003" +
    "\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\023\ufff0\040\ufff0\046\ufff0\047\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\072\ufff0\001\002\000\070\003\062" +
    "\004\076\005\057\006\066\007\010\010\015\015\037\017" +
    "\060\023\051\040\073\046\035\047\071\050\027\051\026" +
    "\052\017\053\030\054\074\055\052\056\046\057\034\060" +
    "\043\061\070\062\053\063\041\066\061\067\056\072\054" +
    "\001\002\000\006\013\033\056\253\001\002\000\004\006" +
    "\252\001\002\000\076\003\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\010\uffdc\015\uffdc\016\uffdc\017\uffdc\023\uffdc\040" +
    "\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\072\uffdc" +
    "\001\002\000\100\002\ufff1\003\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\015\ufff1\016\ufff1\017\ufff1\023\ufff1" +
    "\040\ufff1\046\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\072" +
    "\ufff1\001\002\000\154\002\uffca\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\uffca\012\uffca\014\uffca\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033" +
    "\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\072\uffca\001\002\000\004\017\232" +
    "\001\002\000\076\003\uffde\004\uffde\005\uffde\006\uffde\007" +
    "\uffde\010\uffde\015\uffde\016\uffde\017\uffde\023\uffde\040\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054" +
    "\uffde\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde" +
    "\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\072\uffde\001" +
    "\002\000\004\017\214\001\002\000\076\003\uffdb\004\uffdb" +
    "\005\uffdb\006\uffdb\007\010\010\015\015\uffdb\016\uffdb\017" +
    "\uffdb\023\uffdb\040\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\072\uffdb\001\002\000\076\003\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\023\uffe5\040\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5\067" +
    "\uffe5\072\uffe5\001\002\000\004\017\uffa6\001\002\000\076" +
    "\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\023\uffe4\040\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4\056" +
    "\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\072\uffe4\001\002\000\076\003" +
    "\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\023\uffe1\040\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\067\uffe1\072\uffe1\001\002\000\034\003\104" +
    "\004\076\005\057\006\102\017\060\023\051\040\073\046" +
    "\035\047\071\054\074\055\052\066\061\072\054\001\002" +
    "\000\156\002\uffad\003\uffad\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\012\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033\uffad" +
    "\034\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065\uffad" +
    "\066\uffad\067\uffad\072\uffad\001\002\000\004\013\033\001" +
    "\002\000\004\017\201\001\002\000\070\003\062\004\076" +
    "\005\057\006\066\007\010\010\015\015\176\017\060\023" +
    "\051\040\073\046\035\047\071\050\027\051\026\052\017" +
    "\053\030\054\074\055\052\056\046\057\034\060\043\061" +
    "\070\062\053\063\041\066\061\067\056\072\054\001\002" +
    "\000\004\070\170\001\002\000\156\002\uffb1\003\uffb1\004" +
    "\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1" +
    "\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\072\uffb1\001" +
    "\002\000\034\003\104\004\076\005\057\006\102\017\060" +
    "\023\051\040\073\046\035\047\071\054\074\055\052\066" +
    "\061\072\054\001\002\000\156\002\uffb0\003\uffb0\004\uffb0" +
    "\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0\012\uffb0\014" +
    "\uffb0\015\uffb0\016\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0" +
    "\055\uffb0\056\uffb0\057\uffb0\060\uffb0\061\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\065\uffb0\066\uffb0\067\uffb0\072\uffb0\001\002" +
    "\000\076\004\076\005\057\006\102\012\165\014\130\016" +
    "\164\022\127\023\126\024\115\025\117\026\132\027\113" +
    "\030\133\031\125\032\114\033\111\034\110\035\122\036" +
    "\121\037\105\041\124\042\106\043\123\044\120\045\112" +
    "\046\035\054\074\055\052\066\061\072\054\001\002\000" +
    "\100\003\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\013\033\015\uffe0\016\uffe0\017\uffe0\023\uffe0\040\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0" +
    "\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\072\uffe0\001\002" +
    "\000\076\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\023\uffdd\040\uffdd\046\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055" +
    "\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\072\uffdd\001\002\000" +
    "\076\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7" +
    "\015\uffe7\016\162\017\uffe7\023\uffe7\040\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\072\uffe7\001\002\000\146" +
    "\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012" +
    "\152\014\uffaf\015\uffaf\016\uffaf\017\151\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf" +
    "\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\141\047" +
    "\142\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf" +
    "\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\064" +
    "\uffaf\065\uffaf\066\uffaf\067\uffaf\072\uffaf\001\002\000\146" +
    "\003\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012" +
    "\116\014\130\015\uffdf\016\uffdf\017\uffdf\022\127\023\126" +
    "\024\115\025\117\026\132\027\113\030\133\031\125\032" +
    "\114\033\111\034\110\035\122\036\121\037\105\040\uffdf" +
    "\041\124\042\106\043\123\044\120\045\112\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\067\uffdf\072\uffdf\001\002\000\004" +
    "\017\145\001\002\000\034\003\104\004\076\005\057\006" +
    "\102\017\060\023\051\040\073\046\035\047\071\054\074" +
    "\055\052\066\061\072\054\001\002\000\076\003\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\023\uffe6\040\uffe6\046\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6" +
    "\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066" +
    "\uffe6\067\uffe6\072\uffe6\001\002\000\034\003\104\004\076" +
    "\005\057\006\102\017\060\023\051\040\073\046\035\047" +
    "\071\054\074\055\052\066\061\072\054\001\002\000\156" +
    "\002\uffae\003\uffae\004\uffae\005\uffae\006\uffae\007\uffae\010" +
    "\uffae\011\uffae\012\uffae\014\uffae\015\uffae\016\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae" +
    "\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043" +
    "\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae\057\uffae\060" +
    "\uffae\061\uffae\062\uffae\063\uffae\064\uffae\065\uffae\066\uffae" +
    "\067\uffae\072\uffae\001\002\000\076\003\uffe2\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\015\uffe2\016\uffe2\017\uffe2" +
    "\023\uffe2\040\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067" +
    "\uffe2\072\uffe2\001\002\000\156\002\uffb2\003\uffb2\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\014" +
    "\uffb2\015\uffb2\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2" +
    "\055\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2\063" +
    "\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\072\uffb2\001\002" +
    "\000\076\003\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\023\uffe3\040\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\072\uffe3\001\002\000" +
    "\004\017\101\001\002\000\034\003\104\004\076\005\057" +
    "\006\102\017\060\023\051\040\073\046\035\047\071\054" +
    "\074\055\052\066\061\072\054\001\002\000\156\002\uffaf" +
    "\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\011" +
    "\uffaf\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\020\uffaf" +
    "\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf" +
    "\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\046\141\047\142\050\uffaf\051\uffaf\052\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061" +
    "\uffaf\062\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\067\uffaf" +
    "\072\uffaf\001\002\000\056\012\116\014\130\020\136\022" +
    "\127\023\126\024\115\025\117\026\132\027\113\030\133" +
    "\031\125\032\114\033\111\034\110\035\122\036\121\037" +
    "\105\041\124\042\106\043\123\044\120\045\112\001\002" +
    "\000\074\004\076\005\057\006\102\012\116\014\130\022" +
    "\127\023\126\024\115\025\117\026\132\027\113\030\133" +
    "\031\125\032\114\033\111\034\110\035\122\036\121\037" +
    "\105\041\124\042\106\043\123\044\120\045\112\046\035" +
    "\054\074\055\052\066\061\072\054\001\002\000\154\002" +
    "\uffb7\003\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\011\uffb7\012\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036" +
    "\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\054\uffb7\055\uffb7\056\uffb7\057\uffb7\060\uffb7\061\uffb7" +
    "\062\uffb7\063\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\072" +
    "\uffb7\001\002\000\154\002\uffb3\003\uffb3\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\015" +
    "\uffb3\016\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033" +
    "\uffb3\034\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3" +
    "\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3\064\uffb3\065" +
    "\uffb3\066\uffb3\067\uffb3\072\uffb3\001\002\000\154\002\uffc8" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030" +
    "\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045" +
    "\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8" +
    "\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8" +
    "\001\002\000\154\002\uffba\003\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\010\uffba\011\uffba\012\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba\056\uffba\057" +
    "\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064\uffba\065\uffba" +
    "\066\uffba\067\uffba\072\uffba\001\002\000\154\002\uffbb\003" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\061\uffbb\062\uffbb" +
    "\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067\uffbb\072\uffbb\001" +
    "\002\000\154\002\uffbe\003\uffbe\004\uffbe\005\uffbe\006\uffbe" +
    "\007\uffbe\010\uffbe\011\uffbe\012\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe" +
    "\043\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\065\uffbe\066" +
    "\uffbe\067\uffbe\072\uffbe\001\002\000\154\002\uffc1\003\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\072\uffc1\001\002" +
    "\000\154\002\uffbc\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\057\uffbc\060" +
    "\uffbc\061\uffbc\062\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc" +
    "\067\uffbc\072\uffbc\001\002\000\154\002\uffc5\003\uffc5\004" +
    "\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5" +
    "\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5" +
    "\032\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\072\uffc5\001\002\000" +
    "\004\012\134\001\002\000\154\002\uffc3\003\uffc3\004\uffc3" +
    "\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014" +
    "\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\072\uffc3\001\002\000\154" +
    "\002\uffb5\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010" +
    "\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5" +
    "\020\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\036\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5" +
    "\053\uffb5\054\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\072\uffb5\001\002\000\154\002\uffb8\003\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8\014\uffb8" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\uffb8\034\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\065\uffb8\066\uffb8\067\uffb8\072\uffb8\001\002\000\154\002" +
    "\uffb9\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\011\uffb9\012\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\036" +
    "\uffb9\037\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053" +
    "\uffb9\054\uffb9\055\uffb9\056\uffb9\057\uffb9\060\uffb9\061\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\072" +
    "\uffb9\001\002\000\154\002\uffb6\003\uffb6\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6" +
    "\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\057\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\064\uffb6\065" +
    "\uffb6\066\uffb6\067\uffb6\072\uffb6\001\002\000\154\002\uffb4" +
    "\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\020\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030" +
    "\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045" +
    "\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4" +
    "\054\uffb4\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\072\uffb4" +
    "\001\002\000\154\002\uffbf\003\uffbf\004\uffbf\005\uffbf\006" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\057" +
    "\uffbf\060\uffbf\061\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf" +
    "\066\uffbf\067\uffbf\072\uffbf\001\002\000\154\002\uffc6\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\012\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054" +
    "\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6\001" +
    "\002\000\154\002\uffc7\003\uffc7\004\uffc7\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\011\uffc7\012\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7" +
    "\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051" +
    "\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066" +
    "\uffc7\067\uffc7\072\uffc7\001\002\000\154\002\uffc4\003\uffc4" +
    "\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\072\uffc4\001\002" +
    "\000\154\002\uffc9\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\072\uffc9\001\002\000\154\002\uffc2\003\uffc2\004" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023" +
    "\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2" +
    "\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040" +
    "\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\065\uffc2\066\uffc2\067\uffc2\072\uffc2\001\002\000" +
    "\154\002\uffc0\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052" +
    "\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0" +
    "\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067" +
    "\uffc0\072\uffc0\001\002\000\154\002\uffbd\003\uffbd\004\uffbd" +
    "\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd" +
    "\041\uffbd\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064" +
    "\uffbd\065\uffbd\066\uffbd\067\uffbd\072\uffbd\001\002\000\034" +
    "\003\104\004\076\005\057\006\102\017\060\023\051\040" +
    "\073\046\035\047\071\054\074\055\052\066\061\072\054" +
    "\001\002\000\004\013\033\001\002\000\076\003\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\023\uffa8\040\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066" +
    "\uffa8\067\uffa8\072\uffa8\001\002\000\154\002\uffcf\003\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\116\014\130\015\uffcf\016\uffcf\017\uffcf\020\uffcf\022\127" +
    "\023\126\024\115\025\117\026\132\027\113\030\133\031" +
    "\125\032\114\033\111\034\110\035\122\036\121\037\105" +
    "\040\uffcf\041\124\042\106\043\123\044\120\045\112\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\072\uffcf\001\002" +
    "\000\156\002\uffac\003\uffac\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\011\uffac\012\uffac\014\uffac\015\uffac\016\uffac" +
    "\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac" +
    "\034\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac" +
    "\066\uffac\067\uffac\072\uffac\001\002\000\156\002\uffab\003" +
    "\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\011\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\030\uffab\031\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036" +
    "\uffab\037\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab" +
    "\045\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053" +
    "\uffab\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab" +
    "\062\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\072" +
    "\uffab\001\002\000\154\002\uffcd\003\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\116\014\130\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\022\127\023\126\024\115" +
    "\025\117\026\132\027\113\030\133\031\125\032\114\033" +
    "\111\034\110\035\122\036\121\037\105\040\uffcd\041\124" +
    "\042\106\043\123\044\120\045\112\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\072\uffcd\001\002\000\154\002\uffcc" +
    "\003\uffcc\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011" +
    "\uffcc\012\116\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\114\033\111\034\110\035\122\036\121" +
    "\037\105\040\uffcc\041\124\042\106\043\123\044\120\045" +
    "\112\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\072\uffcc" +
    "\001\002\000\034\003\104\004\076\005\057\006\102\017" +
    "\060\023\051\040\073\046\035\047\071\054\074\055\052" +
    "\066\061\072\054\001\002\000\056\012\116\014\130\020" +
    "\147\022\127\023\126\024\115\025\117\026\132\027\113" +
    "\030\133\031\125\032\114\033\111\034\110\035\122\036" +
    "\121\037\105\041\124\042\106\043\123\044\120\045\112" +
    "\001\002\000\004\013\033\001\002\000\076\003\uffa1\004" +
    "\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\015\uffa1\016\uffa1" +
    "\017\uffa1\023\uffa1\040\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\072\uffa1\001\002\000\036\003\104\004\076" +
    "\005\057\006\102\017\060\020\155\023\051\040\073\046" +
    "\035\047\071\054\074\055\052\066\061\072\054\001\002" +
    "\000\034\003\104\004\076\005\057\006\102\017\060\023" +
    "\051\040\073\046\035\047\071\054\074\055\052\066\061" +
    "\072\054\001\002\000\154\002\uffd8\003\uffd8\004\uffd8\005" +
    "\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\116\014\130" +
    "\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022\127\023\uffd8\024" +
    "\115\025\117\026\132\027\113\030\133\031\125\032\114" +
    "\033\111\034\110\035\122\036\121\037\105\040\uffd8\041" +
    "\124\042\106\043\123\044\120\045\112\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\072\uffd8\001\002\000\060\011" +
    "\uffec\012\116\014\130\020\uffec\022\127\023\126\024\115" +
    "\025\117\026\132\027\113\030\133\031\125\032\114\033" +
    "\111\034\110\035\122\036\121\037\105\041\124\042\106" +
    "\043\123\044\120\045\112\001\002\000\100\003\uffee\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\013\uffee\015\uffee" +
    "\016\uffee\017\uffee\023\uffee\040\uffee\046\uffee\047\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065" +
    "\uffee\066\uffee\067\uffee\072\uffee\001\002\000\006\011\157" +
    "\020\160\001\002\000\034\003\104\004\076\005\057\006" +
    "\102\017\060\023\051\040\073\046\035\047\071\054\074" +
    "\055\052\066\061\072\054\001\002\000\100\003\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\uffef\010\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\023\uffef\040\uffef\046\uffef\047\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\067\uffef\072\uffef\001\002\000\060\011\uffed" +
    "\012\116\014\130\020\uffed\022\127\023\126\024\115\025" +
    "\117\026\132\027\113\030\133\031\125\032\114\033\111" +
    "\034\110\035\122\036\121\037\105\041\124\042\106\043" +
    "\123\044\120\045\112\001\002\000\074\003\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\010\uffe8\015\uffe8\017\uffe8\023" +
    "\uffe8\040\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8" +
    "\072\uffe8\001\002\000\100\002\uffeb\003\uffeb\004\uffeb\005" +
    "\uffeb\006\uffeb\007\uffeb\010\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\023\uffeb\040\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb" +
    "\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb\067" +
    "\uffeb\072\uffeb\001\002\000\104\002\uffd6\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\015\uffd6\016" +
    "\uffd6\017\uffd6\020\uffd6\023\uffd6\040\uffd6\046\uffd6\047\uffd6" +
    "\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\072\uffd6\001\002\000\104\003" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\134\015\uffd7\016\uffd7\017\uffd7\020\uffd7\023\uffd7\040" +
    "\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7" +
    "\001\002\000\056\012\116\014\130\020\167\022\127\023" +
    "\126\024\115\025\117\026\132\027\113\030\133\031\125" +
    "\032\114\033\111\034\110\035\122\036\121\037\105\041" +
    "\124\042\106\043\123\044\120\045\112\001\002\000\154" +
    "\002\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044" +
    "\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060\uffce\061" +
    "\uffce\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce" +
    "\072\uffce\001\002\000\004\071\171\001\002\000\004\017" +
    "\172\001\002\000\036\003\104\004\076\005\057\006\102" +
    "\017\060\020\174\023\051\040\073\046\035\047\071\054" +
    "\074\055\052\066\061\072\054\001\002\000\056\012\116" +
    "\014\130\020\175\022\127\023\126\024\115\025\117\026" +
    "\132\027\113\030\133\031\125\032\114\033\111\034\110" +
    "\035\122\036\121\037\105\041\124\042\106\043\123\044" +
    "\120\045\112\001\002\000\076\003\uff99\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\015\uff99\016\uff99\017\uff99\023" +
    "\uff99\040\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99" +
    "\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061" +
    "\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99" +
    "\072\uff99\001\002\000\076\003\uff9a\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\015\uff9a\016\uff9a\017\uff9a\023\uff9a" +
    "\040\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053" +
    "\uff9a\054\uff9a\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a" +
    "\062\uff9a\063\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\072" +
    "\uff9a\001\002\000\100\002\ufff2\003\ufff2\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\015\ufff2\016\ufff2\017\ufff2\023" +
    "\ufff2\040\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2" +
    "\072\ufff2\001\002\000\076\003\uffe9\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\015\uffe9\016\200\017\uffe9\023\uffe9" +
    "\040\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\053" +
    "\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9" +
    "\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067\uffe9\072" +
    "\uffe9\001\002\000\074\003\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\015\uffea\017\uffea\023\uffea\040\uffea\046" +
    "\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea" +
    "\055\uffea\056\uffea\057\uffea\060\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\066\uffea\067\uffea\072\uffea\001\002" +
    "\000\004\005\202\001\002\000\004\020\203\001\002\000" +
    "\156\002\uffa9\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\011\uffa9\012\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9" +
    "\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\056\uffa9\057\uffa9" +
    "\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\067\uffa9\072\uffa9\001\002\000\004\061\205\001\002" +
    "\000\004\017\206\001\002\000\034\003\104\004\076\005" +
    "\057\006\102\017\060\023\051\040\073\046\035\047\071" +
    "\054\074\055\052\066\061\072\054\001\002\000\056\012" +
    "\116\014\130\020\210\022\127\023\126\024\115\025\117" +
    "\026\132\027\113\030\133\031\125\032\114\033\111\034" +
    "\110\035\122\036\121\037\105\041\124\042\106\043\123" +
    "\044\120\045\112\001\002\000\076\003\uffa0\004\uffa0\005" +
    "\uffa0\006\uffa0\007\uffa0\010\uffa0\015\uffa0\016\uffa0\017\uffa0" +
    "\023\uffa0\040\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0" +
    "\061\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067" +
    "\uffa0\072\uffa0\001\002\000\154\002\uffcb\003\uffcb\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\116\014" +
    "\130\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb" +
    "\024\115\025\117\026\132\027\113\030\133\031\125\032" +
    "\114\033\111\034\110\035\122\036\121\037\105\040\uffcb" +
    "\041\124\042\106\043\123\044\120\045\112\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064" +
    "\uffcb\065\uffcb\066\uffcb\067\uffcb\072\uffcb\001\002\000\100" +
    "\002\ufff7\003\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\023\ufff7\040\ufff7\046\ufff7" +
    "\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\072\ufff7\001\002\000" +
    "\100\002\ufff8\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\015\ufff8\016\ufff8\017\ufff8\023\ufff8\040\ufff8\046" +
    "\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\072\ufff8\001\002" +
    "\000\014\003\217\006\215\051\026\052\017\053\030\001" +
    "\002\000\004\012\152\001\002\000\004\016\224\001\002" +
    "\000\006\012\223\016\164\001\002\000\004\020\221\001" +
    "\002\000\004\013\033\001\002\000\076\003\uffa4\004\uffa4" +
    "\005\uffa4\006\uffa4\007\uffa4\010\uffa4\015\uffa4\016\uffa4\017" +
    "\uffa4\023\uffa4\040\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060" +
    "\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4\066\uffa4" +
    "\067\uffa4\072\uffa4\001\002\000\104\002\uffd7\003\uffd7\004" +
    "\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\015\uffd7" +
    "\016\uffd7\017\uffd7\020\uffd7\023\uffd7\040\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\072\uffd7\001\002\000\034" +
    "\003\104\004\076\005\057\006\102\017\060\023\051\040" +
    "\073\046\035\047\071\054\074\055\052\066\061\072\054" +
    "\001\002\000\056\012\116\014\130\016\226\022\127\023" +
    "\126\024\115\025\117\026\132\027\113\030\133\031\125" +
    "\032\114\033\111\034\110\035\122\036\121\037\105\041" +
    "\124\042\106\043\123\044\120\045\112\001\002\000\042" +
    "\003\062\004\076\005\057\006\227\017\060\023\051\040" +
    "\073\046\035\047\071\051\026\052\017\053\030\054\074" +
    "\055\052\066\061\072\054\001\002\000\062\012\152\014" +
    "\uffaf\020\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf" +
    "\045\uffaf\046\141\047\142\001\002\000\056\012\116\014" +
    "\130\020\uffa2\022\127\023\126\024\115\025\117\026\132" +
    "\027\113\030\133\031\125\032\114\033\111\034\110\035" +
    "\122\036\121\037\105\041\124\042\106\043\123\044\120" +
    "\045\112\001\002\000\004\020\uffa3\001\002\000\022\004" +
    "\076\005\057\006\102\046\035\054\074\055\052\066\061" +
    "\072\054\001\002\000\004\020\234\001\002\000\004\013" +
    "\235\001\002\000\004\065\237\001\002\000\010\015\244" +
    "\064\245\065\237\001\002\000\022\004\076\005\057\006" +
    "\102\046\035\054\074\055\052\066\061\072\054\001\002" +
    "\000\010\015\uff9c\064\uff9c\065\uff9c\001\002\000\004\021" +
    "\242\001\002\000\066\003\062\004\076\005\057\006\066" +
    "\007\010\010\015\017\060\023\051\040\073\046\035\047" +
    "\071\050\027\051\026\052\017\053\030\054\074\055\052" +
    "\056\046\057\034\060\043\061\070\062\053\063\041\066" +
    "\061\067\056\072\054\001\002\000\074\003\062\004\076" +
    "\005\057\006\066\007\010\010\015\015\uff9b\017\060\023" +
    "\051\040\073\046\035\047\071\050\027\051\026\052\017" +
    "\053\030\054\074\055\052\056\046\057\034\060\043\061" +
    "\070\062\053\063\041\064\uff9b\065\uff9b\066\061\067\056" +
    "\072\054\001\002\000\076\003\uff9e\004\uff9e\005\uff9e\006" +
    "\uff9e\007\uff9e\010\uff9e\015\uff9e\016\uff9e\017\uff9e\023\uff9e" +
    "\040\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e" +
    "\062\uff9e\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\072" +
    "\uff9e\001\002\000\004\021\247\001\002\000\010\015\uff9d" +
    "\064\uff9d\065\uff9d\001\002\000\066\003\062\004\076\005" +
    "\057\006\066\007\010\010\015\017\060\023\051\040\073" +
    "\046\035\047\071\050\027\051\026\052\017\053\030\054" +
    "\074\055\052\056\046\057\034\060\043\061\070\062\053" +
    "\063\041\066\061\067\056\072\054\001\002\000\070\003" +
    "\062\004\076\005\057\006\066\007\010\010\015\015\251" +
    "\017\060\023\051\040\073\046\035\047\071\050\027\051" +
    "\026\052\017\053\030\054\074\055\052\056\046\057\034" +
    "\060\043\061\070\062\053\063\041\066\061\067\056\072" +
    "\054\001\002\000\076\003\uff9f\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\015\uff9f\016\uff9f\017\uff9f\023\uff9f\040" +
    "\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f" +
    "\054\uff9f\055\uff9f\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062" +
    "\uff9f\063\uff9f\064\uff9f\065\uff9f\066\uff9f\067\uff9f\072\uff9f" +
    "\001\002\000\156\002\uffaa\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\014\uffaa\015\uffaa" +
    "\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037\uffaa\040\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046\uffaa\047\uffaa" +
    "\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\072\uffaa\001\002\000\004\017" +
    "\uffa5\001\002\000\076\003\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\015\uffa7\016\uffa7\017\uffa7\023\uffa7\040" +
    "\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\072\uffa7" +
    "\001\002\000\104\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006" +
    "\uffd4\007\uffd4\010\uffd4\011\257\015\uffd4\016\uffd4\017\uffd4" +
    "\020\uffd4\023\uffd4\040\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\067\uffd4\072\uffd4\001\002\000\104\002\uffd5\003\uffd5" +
    "\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\152\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\023\uffd5\040\uffd5\046\uffd5" +
    "\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055" +
    "\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\064\uffd5\065\uffd5\066\uffd5\067\uffd5\072\uffd5\001\002\000" +
    "\006\003\217\006\215\001\002\000\104\002\uffda\003\uffda" +
    "\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\023\uffda\040\uffda\046\uffda" +
    "\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\072\uffda\001\002\000" +
    "\004\002\001\001\002\000\024\002\ufff9\003\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001" +
    "\002\000\024\002\uffff\003\uffff\006\uffff\007\uffff\010\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\034\002\022\003\010\004\013\005\003\006" +
    "\023\012\006\024\004\025\021\026\017\030\015\031\011" +
    "\032\024\034\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\030\211\031\212\001\001" +
    "\000\002\001\001\000\030\004\262\005\003\006\023\012" +
    "\006\024\004\025\021\026\017\030\015\031\011\032\024" +
    "\034\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\162\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\024\254\025\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\031\001\001\000\002" +
    "\001\001\000\054\005\063\006\041\007\066\010\037\011" +
    "\071\012\043\013\074\017\044\020\046\021\076\022\047" +
    "\024\004\025\021\026\062\027\064\030\015\031\011\032" +
    "\024\033\054\034\035\035\077\001\001\000\004\036\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\030\211\031\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\210\010\037\001\001\000\002\001" +
    "\001\000\004\036\203\001\001\000\002\001\001\000\052" +
    "\005\063\006\041\007\066\010\037\011\071\012\043\013" +
    "\074\017\044\020\046\021\076\022\047\024\004\025\021" +
    "\026\062\027\176\030\015\031\011\032\024\034\035\035" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\165\010\037\001\001\000\002\001\001\000\006\010" +
    "\130\016\106\001\001\000\004\036\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\134\001\001\000\002\001\001\000\006\007\143\010\037" +
    "\001\001\000\002\001\001\000\006\007\142\010\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\007\102\010" +
    "\037\001\001\000\002\001\001\000\004\016\134\001\001" +
    "\000\006\010\130\016\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\137\010\037\001\001\000\004\036\136\001" +
    "\001\000\002\001\001\000\004\016\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\134\001\001\000" +
    "\004\016\134\001\001\000\006\007\145\010\037\001\001" +
    "\000\004\016\134\001\001\000\004\036\147\001\001\000" +
    "\002\001\001\000\010\007\153\010\037\037\155\001\001" +
    "\000\006\007\152\010\037\001\001\000\004\016\134\001" +
    "\001\000\004\016\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\160\010\037\001\001\000\002\001" +
    "\001\000\004\016\134\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\172\010\037\001\001\000\004\016" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\206\010\037\001\001\000" +
    "\004\016\134\001\001\000\002\001\001\000\004\016\134" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\215\023\217\024\004\025\021\032\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\224\010\037\001\001\000\004\016" +
    "\134\001\001\000\016\006\230\007\227\010\037\024\004" +
    "\025\021\032\024\001\001\000\002\001\001\000\004\016" +
    "\134\001\001\000\002\001\001\000\004\010\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\235\015" +
    "\237\001\001\000\004\015\245\001\001\000\004\010\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\005" +
    "\063\006\041\007\066\010\037\011\071\012\043\013\074" +
    "\017\044\020\046\021\076\022\047\024\004\025\021\026" +
    "\062\027\064\030\015\031\011\032\024\033\242\034\035" +
    "\035\077\001\001\000\052\005\063\006\041\007\066\010" +
    "\037\011\071\012\043\013\074\017\044\020\046\021\076" +
    "\022\047\024\004\025\021\026\062\027\176\030\015\031" +
    "\011\032\024\034\035\035\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\054\005\063\006" +
    "\041\007\066\010\037\011\071\012\043\013\074\017\044" +
    "\020\046\021\076\022\047\024\004\025\021\026\062\027" +
    "\064\030\015\031\011\032\024\033\247\034\035\035\077" +
    "\001\001\000\052\005\063\006\041\007\066\010\037\011" +
    "\071\012\043\013\074\017\044\020\046\021\076\022\047" +
    "\024\004\025\021\026\062\027\176\030\015\031\011\032" +
    "\024\034\035\035\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String filePath;
    public HashMap<String, ArrayList<String>> elements;

    public void setFilePath (String path) {
        filePath = path;
        elements = new HashMap<String, ArrayList<String>>();

        elements.put("method-params", new ArrayList<String>());
        elements.put("method-lines", new ArrayList<String>());
        elements.put("class-method", new ArrayList<String>());
        elements.put("class-lines", new ArrayList<String>());
        elements.put("comment", new ArrayList<String>());
        elements.put("method", new ArrayList<String>());
        elements.put("class", new ArrayList<String>());
        elements.put("var", new ArrayList<String>());
    }

    public HashMap getElements () {
        return elements;
    }

    public void syntax_error (Symbol s) {
        System.err.println("\nError sintactico en la linea " + s.right +
        " columna " + s.left + " componente: " + s.value + ".\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath, "Error sintactico");
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception {
        System.err.println("\nError sintactico irrecuperable en la linea " +
        s.right + " columna " + s.left + " componente: " + s.value +
        " no reconocido.\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath, "Error sintactico irrecuperable");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JSParser$actions {


    public void addElement (String name, String value) {
        parser.elements.get(name).add(value);
    }

    public void addClassMethod (String classID, MethodContent content) {
        for (int contentIndex = 0;
            contentIndex < content.list.size();
            contentIndex++) {
            String[] declaration = content.list.get(contentIndex);
            if (declaration[0].equals("method")) {
               int methodStart = Integer.parseInt(declaration[1]);
               if (methodStart >= content.lineStart
                    && methodStart <= content.lineEnd) {
                 addElement("class-method", classID + "-" + declaration[2]);
               }
            }
        }
    }

  private final JSParser parser;

  /** Constructor */
  CUP$JSParser$actions(JSParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JSParser$do_action(
    int                        CUP$JSParser$act_num,
    java_cup.runtime.lr_parser CUP$JSParser$parser,
    java.util.Stack            CUP$JSParser$stack,
    int                        CUP$JSParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSParser$result;

      /* select the action based on the action number */
      switch (CUP$JSParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CONSOLESEQ ::= console dot logsym openparenthesis closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",16, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CONSOLESEQ ::= console dot logsym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSOLESEQ",16, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // SWITCHSEQCONTENT ::= casesym VARVALUE colom DECLARATIONS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCONTENT",11, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // SWITCHSEQCASES ::= SWITCHSEQCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // SWITCHSEQCASES ::= SWITCHSEQCASES SWITCHSEQCONTENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQCASES",10, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SWITCHSEQ ::= switchsym openparenthesis VARVALUE closeparenthesis openbracket SWITCHSEQCASES closebracket 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQ",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-6)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SWITCHSEQ ::= switchsym openparenthesis VARVALUE closeparenthesis openbracket SWITCHSEQCASES defaultsym colom DECLARATIONS closebracket 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("SWITCHSEQ",9, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-9)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DOWHILESEQ ::= dosym METHODCONTENT whilesym openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DOWHILESEQ",15, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-5)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // WHILESEQ ::= whilesym openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("WHILESEQ",14, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FORSEQPARAMS ::= ASSIGNMENT semicolom EXPRESSIONS semicolom EXPRESSIONS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQPARAMS",17, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FORSEQPARAMS ::= ASSIGNMENT semicolom EXPRESSIONS semicolom ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQPARAMS",17, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FORSEQ ::= forsym openparenthesis FORSEQPARAMS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FORSEQ",13, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CONSTROLSEQSYM ::= elsesym ifsym 
            {
              String RESULT =null;
		 RESULT = "else if"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONSTROLSEQSYM ::= ifsym 
            {
              String RESULT =null;
		 RESULT = "if"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONSTROLSEQSYM",27, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONTROLSEQ ::= elsesym METHODCONTENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONTROLSEQ",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONTROLSEQ ::= CONSTROLSEQSYM openparenthesis EXPRESSIONS closeparenthesis METHODCONTENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("CONTROLSEQ",7, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARVALUE ::= requiresym openparenthesis strtext closeparenthesis 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARVALUE ::= plusplus id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARVALUE ::= id lessMlessM 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARVALUE ::= id plusplus 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARVALUE ::= boolfalse 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARVALUE ::= booltrue 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARVALUE ::= id 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARVALUE ::= breaksym 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARVALUE ::= strtext 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARVALUE ::= decimal 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARVALUE",6, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESSIONOPT ::= minor 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESSIONOPT ::= major 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESSIONOPT ::= lessoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESSIONOPT ::= moreoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESSIONOPT ::= modeq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESSIONOPT ::= diveq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESSIONOPT ::= xoreq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESSIONOPT ::= timeseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSIONOPT ::= lesseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESSIONOPT ::= pluseq 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESSIONOPT ::= equals equals 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESSIONOPT ::= notequals 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESSIONOPT ::= xor 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESSIONOPT ::= and 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESSIONOPT ::= or 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESSIONOPT ::= mod 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESSIONOPT ::= div 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESSIONOPT ::= timestimes 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESSIONOPT ::= times 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESSIONOPT ::= lessM 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESSIONOPT ::= plus 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONOPT",12, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESSIONS ::= error EXPRESSIONOPT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESSIONS ::= error VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSIONS ::= VARVALUE 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSIONS ::= lessM EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESSIONS ::= lessMlessM EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESSIONS ::= not EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESSIONS ::= openparenthesis EXPRESSIONS closeparenthesis 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESSIONS ::= EXPRESSIONS EXPRESSIONOPT EXPRESSIONS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS",5, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VARTYPE ::= constsym 
            {
              String RESULT =null;
		 RESULT = "const"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",24, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VARTYPE ::= let 
            {
              String RESULT =null;
		 RESULT = "let"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",24, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VARTYPE ::= var 
            {
              String RESULT =null;
		 RESULT = "var"; 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("VARTYPE",24, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASSIGNMENT ::= INLINEASSIGNMENTS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASSIGNMENT ::= VARTYPE INLINEASSIGNMENTS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASSIGNMENT ::= VARTYPE id 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",4, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INLINEASSIGNMENT ::= error semicolom 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENT",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INLINEASSIGNMENT ::= error equals 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENT",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INLINEASSIGNMENT ::= id equals EXPRESSIONS 
            {
              Object RESULT =null;
		int varIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int varIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String varID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    addElement("var", varID);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENT",19, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INLINEASSIGNMENTS ::= INLINEASSIGNMENT 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",18, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INLINEASSIGNMENTS ::= INLINEASSIGNMENTS comma INLINEASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("INLINEASSIGNMENTS",18, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARATION ::= COMMENTS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"comment", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATION ::= FUNCTION 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String line = Integer.toString(funcIDright);
    String[] data = new String[]{"method", line, funcID};
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATION ::= NEWCLASS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"class", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARATION ::= ASSIGNMENT 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"assignment", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= EXPRESSIONS 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"exp", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= FUNCTIONHEADER 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"call", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= CONSOLESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"console", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= SWITCHSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"switch", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATION ::= DOWHILESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"dowhile", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATION ::= WHILESEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"while", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= FORSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"for", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= CONTROLSEQ 
            {
              String[] RESULT =null;
		
    String[] data = new String[]{"control", "0", ""}; RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",21, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARATIONS ::= DECLARATION 
            {
              ArrayList<String[]> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    ArrayList<String[]> list = new ArrayList<String[]>();
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT = list;
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARATIONS ::= DECLARATION semicolom 
            {
              ArrayList<String[]> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    ArrayList<String[]> list = new ArrayList<String[]>();
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT = list;
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARATIONS ::= DECLARATIONS DECLARATION 
            {
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = list;
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] line = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    RESULT = list;
    String[] data = new String[] {line[0], line[1], line[2]};
    RESULT.add(data);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",25, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCTION ::= FUNCTIONHEADER METHODCONTENT 
            {
              String RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String[] funcID = (String[])((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		MethodContent content = (MethodContent)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String counter = Integer.toString(content.lineEnd - content.lineStart);
    addElement("method", funcID[0]);
    addElement("method-params", funcID[1]);
    addElement("method-lines", counter);
    RESULT = funcID[0];

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",26, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCTIONPARAMS ::= EXPRESSIONS 
            {
              Object RESULT =null;
		
    int defLines = 0;
    RESULT = defLines;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCTIONPARAMS ::= FUNCTIONPARAMS comma EXPRESSIONS 
            {
              Object RESULT =null;
		int countleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int countright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object count = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    int vl = (int) count;
    RESULT = ++vl;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONPARAMS",29, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCTIONHEADER ::= id openparenthesis closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		
    String[] functionParams = new String[]{funcID, "0"};
    RESULT = functionParams;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",20, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCTIONHEADER ::= id openparenthesis FUNCTIONPARAMS closeparenthesis 
            {
              String[] RESULT =null;
		int funcIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).left;
		int funcIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).right;
		String funcID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		
    String[] functionParams = new String[]{funcID, Integer.toString((int) params)};
    RESULT = functionParams;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONHEADER",20, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-3)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEWCLASS ::= classsym id METHODCONTENT 
            {
              Object RESULT =null;
		int classIDleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int classIDright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		String classID = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int contentleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int contentright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		MethodContent content = (MethodContent)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    String counter = Integer.toString(content.lineEnd - content.lineStart);
    addElement("class", classID);
    addElement("class-lines", counter);
    addClassMethod(classID, content);

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("NEWCLASS",3, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // METHODCONTENT ::= openbracket closebracket 
            {
              MethodContent RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    int lineStart = openLineright;
    int lineEnd = closeLineright;
    MethodContent data = new MethodContent(null, lineStart, lineEnd);
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",28, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // METHODCONTENT ::= openbracket DECLARATIONS closebracket 
            {
              MethodContent RESULT =null;
		int openLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).left;
		int openLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).right;
		Object openLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		int closeLineleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int closeLineright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		Object closeLine = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    int lineStart = openLineright;
    int lineEnd = closeLineright;
    MethodContent data = new MethodContent(list, lineStart, lineEnd);
    RESULT = data;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODCONTENT",28, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MULTICOMMENT ::= mcmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("MULTICOMMENT",23, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // COMMENT ::= cmt 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		
    RESULT = text;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENT",22, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // COMMENTS ::= COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // COMMENTS ::= MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMMENTS ::= COMMENTS COMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMMENTS ::= COMMENTS MULTICOMMENT 
            {
              Object RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$JSParser$stack.peek()).value;
		 addElement("comment", text); 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("COMMENTS",8, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // METHOD ::= error openbracket 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // METHOD ::= ASSIGNMENT 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METHOD ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METHOD ::= NEWCLASS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // METHOD ::= COMMENTS 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHOD",2, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // METHODS ::= METHOD 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // METHODS ::= METHODS METHOD 
            {
              Object RESULT =null;

              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("METHODS",1, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= METHODS 
            {
              Object RESULT =null;
		 
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          return CUP$JSParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)).value;
		RESULT = start_val;
              CUP$JSParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSParser$stack.elementAt(CUP$JSParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSParser$parser.done_parsing();
          return CUP$JSParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

