
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Aug 25 14:42:32 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.fca;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.alexsantos.proyecto01.graphs.*;
import com.alexsantos.proyecto01.utils.Tools;
import com.alexsantos.proyecto01.fca.Reports;
import com.alexsantos.proyecto01.analyzer.errors.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Aug 25 14:42:32 CST 2021
  */
public class FCAParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FCAParser() {super();}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\003\000\002\016\005" +
    "\000\002\016\005\000\002\016\003\000\002\016\003\000" +
    "\002\002\003\000\002\003\006\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\004\000\002\011\004\000\002\004\011\000" +
    "\002\004\004\000\002\005\006\000\002\006\005\000\002" +
    "\006\004\000\002\006\004\000\002\007\006\000\002\007" +
    "\006\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\005\000\002\017\005\000\002\021\007\000" +
    "\002\022\007\000\002\014\006\000\002\031\005\000\002" +
    "\031\004\000\002\031\004\000\002\032\003\000\002\032" +
    "\003\000\002\033\005\000\002\033\005\000\002\013\006" +
    "\000\002\027\005\000\002\027\004\000\002\027\004\000" +
    "\002\012\006\000\002\023\005\000\002\023\004\000\002" +
    "\023\004\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\026\005" +
    "\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\011\004\001\002\000\004\021\010\001" +
    "\002\000\004\002\ufff8\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\016\003\021\012\013\013" +
    "\014\014\025\015\020\016\016\001\002\000\020\003\ufff1" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\022\ufff1\001" +
    "\002\000\020\003\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\022\ufff2\001\002\000\004\024\164\001\002\000" +
    "\004\021\143\001\002\000\020\003\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\022\uffef\001\002\000\004\021" +
    "\124\001\002\000\020\003\021\012\013\013\014\014\025" +
    "\015\020\016\016\022\ufff4\001\002\000\004\021\112\001" +
    "\002\000\010\021\111\022\107\024\110\001\002\000\020" +
    "\003\021\012\013\013\014\014\025\015\020\016\016\022" +
    "\ufff5\001\002\000\020\003\ufff0\012\ufff0\013\ufff0\014\ufff0" +
    "\015\ufff0\016\ufff0\022\ufff0\001\002\000\004\022\105\001" +
    "\002\000\004\021\026\001\002\000\016\003\034\031\036" +
    "\032\037\033\040\035\033\036\031\001\002\000\016\022" +
    "\103\031\036\032\037\033\040\035\033\036\031\001\002" +
    "\000\004\023\uffcd\001\002\000\004\026\077\001\002\000" +
    "\004\023\076\001\002\000\004\026\073\001\002\000\004" +
    "\023\072\001\002\000\004\023\uffe2\001\002\000\004\026" +
    "\067\001\002\000\004\026\056\001\002\000\004\026\045" +
    "\001\002\000\004\023\uffcb\001\002\000\004\023\uffe4\001" +
    "\002\000\004\023\uffcc\001\002\000\004\023\uffe3\001\002" +
    "\000\004\027\046\001\002\000\006\004\047\006\051\001" +
    "\002\000\006\017\ufffa\030\ufffa\001\002\000\006\017\052" +
    "\030\053\001\002\000\006\017\ufff9\030\ufff9\001\002\000" +
    "\006\004\054\006\055\001\002\000\004\023\uffde\001\002" +
    "\000\006\017\ufffc\030\ufffc\001\002\000\006\017\ufffb\030" +
    "\ufffb\001\002\000\004\027\057\001\002\000\006\005\060" +
    "\006\062\001\002\000\006\017\ufffe\030\ufffe\001\002\000" +
    "\006\017\063\030\064\001\002\000\006\017\ufffd\030\ufffd" +
    "\001\002\000\006\005\065\006\066\001\002\000\004\023" +
    "\uffdf\001\002\000\006\017\000\030\000\001\002\000\006" +
    "\017\uffff\030\uffff\001\002\000\006\005\070\006\071\001" +
    "\002\000\004\023\uffe1\001\002\000\004\023\uffe0\001\002" +
    "\000\016\022\uffce\031\uffce\032\uffce\033\uffce\035\uffce\036" +
    "\uffce\001\002\000\006\005\074\006\075\001\002\000\004" +
    "\023\uffca\001\002\000\004\023\uffc9\001\002\000\016\022" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\035\uffcf\036\uffcf\001\002" +
    "\000\006\005\100\006\101\001\002\000\004\023\uffc8\001" +
    "\002\000\004\023\uffc7\001\002\000\004\023\104\001\002" +
    "\000\020\003\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016" +
    "\uffd1\022\uffd1\001\002\000\016\022\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\035\uffd0\036\uffd0\001\002\000\004\002\ufff7\001" +
    "\002\000\004\022\ufff6\001\002\000\020\003\uffed\012\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\022\uffed\001\002\000" +
    "\020\003\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\022\uffeb\001\002\000\020\003\uffee\012\uffee\013\uffee\014" +
    "\uffee\015\uffee\016\uffee\022\uffee\001\002\000\012\003\114" +
    "\031\036\032\037\033\040\001\002\000\004\023\122\001" +
    "\002\000\004\023\121\001\002\000\012\022\116\031\036" +
    "\032\037\033\040\001\002\000\020\003\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\022\uffd5\001\002\000\004" +
    "\023\120\001\002\000\012\022\uffd4\031\uffd4\032\uffd4\033" +
    "\uffd4\001\002\000\012\022\uffd2\031\uffd2\032\uffd2\033\uffd2" +
    "\001\002\000\012\022\uffd3\031\uffd3\032\uffd3\033\uffd3\001" +
    "\002\000\004\022\ufff3\001\002\000\010\003\127\031\036" +
    "\034\130\001\002\000\004\023\uffd8\001\002\000\010\022" +
    "\140\031\036\034\130\001\002\000\004\023\137\001\002" +
    "\000\004\026\134\001\002\000\004\023\133\001\002\000" +
    "\004\023\uffd9\001\002\000\010\022\uffdb\031\uffdb\034\uffdb" +
    "\001\002\000\006\005\135\006\136\001\002\000\004\023" +
    "\uffd7\001\002\000\004\023\uffd6\001\002\000\010\022\uffda" +
    "\031\uffda\034\uffda\001\002\000\020\003\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd\001\002\000\004" +
    "\023\142\001\002\000\010\022\uffdc\031\uffdc\034\uffdc\001" +
    "\002\000\010\003\144\007\150\010\147\001\002\000\004" +
    "\023\163\001\002\000\010\007\150\010\147\022\160\001" +
    "\002\000\004\023\157\001\002\000\004\006\154\001\002" +
    "\000\004\006\151\001\002\000\004\020\152\001\002\000" +
    "\004\005\153\001\002\000\004\023\uffe6\001\002\000\004" +
    "\020\155\001\002\000\004\004\156\001\002\000\004\023" +
    "\uffe5\001\002\000\010\007\uffe8\010\uffe8\022\uffe8\001\002" +
    "\000\020\003\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\022\uffea\001\002\000\004\023\162\001\002\000\010" +
    "\007\uffe9\010\uffe9\022\uffe9\001\002\000\010\007\uffe7\010" +
    "\uffe7\022\uffe7\001\002\000\004\005\165\001\002\000\004" +
    "\017\166\001\002\000\004\005\167\001\002\000\004\025" +
    "\170\001\002\000\004\023\171\001\002\000\020\003\uffec" +
    "\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\022\uffec\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\014\005\016\010\023\011\021\012\011\013" +
    "\010\014\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\014\005\016\010\122\011\021" +
    "\012\011\013\010\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\014\005\016\010\105\011\021" +
    "\012\011\013\010\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\041\020\027" +
    "\021\043\022\034\023\026\024\031\025\042\026\040\001" +
    "\001\000\020\017\041\020\027\021\043\022\034\024\101" +
    "\025\042\026\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\041\020\112\021\043\022\034\027" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\041\020\116\021\043\022\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\131\031" +
    "\125\032\130\033\124\001\001\000\002\001\001\000\010" +
    "\017\131\032\140\033\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\144\007\145\001\001\000" +
    "\002\001\001\000\004\007\160\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FCAParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FCAParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FCAParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String filePath;

    public void setFilePath(String path){
        filePath = path;
    }

    public void syntax_error(Symbol s){
        System.err.println("\nError sintactico en la linea " + s.right +
        " columna " + s.left + " componente: " + s.value + ".\n");
        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("\nError sintactico irrecuperable en la linea " +
        s.right + " columna " + s.left + " componente: " + s.value +
        " no reconocido.\n");
        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FCAParser$actions {
  private final FCAParser parser;

  /** Constructor */
  CUP$FCAParser$actions(FCAParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FCAParser$do_action(
    int                        CUP$FCAParser$act_num,
    java_cup.runtime.lr_parser CUP$FCAParser$parser,
    java.util.Stack            CUP$FCAParser$stack,
    int                        CUP$FCAParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FCAParser$result;

      /* select the action based on the action number */
      switch (CUP$FCAParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BARGRAPHPTITLEY ::= bgtitley colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",20, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BARGRAPHPTITLEY ::= bgtitley colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",20, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BARGRAPHPTITLEX ::= bgtitlex colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",19, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // BARGRAPHPTITLEX ::= bgtitlex colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",19, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // BARGRAPHPROP ::= BARGRAPHPTITLEY 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String prop = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {prop, "yaxisTitle", propright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",18, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // BARGRAPHPROP ::= BARGRAPHPTITLEX 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String prop = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {prop, "xaxisTitle", propright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",18, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BARGRAPHPROP ::= GRAPHPROP 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = prop;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",18, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BARGRAPHPROPS ::= error semicolom 
            {
              BarGraph RESULT =null;
		
    BarGraph barGraph = new BarGraph();
    RESULT = barGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",17, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BARGRAPHPROPS ::= BARGRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    BarGraph barGraph = new BarGraph();
    RESULT = barGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",17, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BARGRAPHPROPS ::= BARGRAPHPROPS BARGRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",17, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BARGRAPH ::= bargraph openbracket BARGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "barras");

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPH",8, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PIEGRAPHPROPS ::= error semicolom 
            {
              PieGraph RESULT =null;
		
    PieGraph pieGraph = new PieGraph();
    RESULT = pieGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",21, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PIEGRAPHPROPS ::= GRAPHPROP semicolom 
            {
              PieGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    PieGraph pieGraph = new PieGraph();
    RESULT = pieGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",21, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PIEGRAPHPROPS ::= PIEGRAPHPROPS GRAPHPROP semicolom 
            {
              PieGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		PieGraph graph = (PieGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",21, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PIEGRAPH ::= piegraph openbracket PIEGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		PieGraph graph = (PieGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "pie");

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPH",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LINEGRAPHFILE ::= file colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHFILE",25, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LINEGRAPHFILE ::= file colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHFILE",25, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LINEGRAPHPROP ::= LINEGRAPHFILE 
            {
              Object[] RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {text, "file", textright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROP",24, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LINEGRAPHPROP ::= GRAPHTITLE 
            {
              Object[] RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {text, "title", textright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROP",24, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LINEGRAPHPROPS ::= error semicolom 
            {
              LineGraph RESULT =null;
		
    LineGraph lineGraph = new LineGraph();
    RESULT = lineGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LINEGRAPHPROPS ::= LINEGRAPHPROP semicolom 
            {
              LineGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    LineGraph lineGraph = new LineGraph();
    RESULT = lineGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LINEGRAPHPROPS ::= LINEGRAPHPROPS LINEGRAPHPROP semicolom 
            {
              LineGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		LineGraph graph = (LineGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LINEGRAPH ::= linegraph openbracket LINEGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		LineGraph graph = (LineGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "lineas");

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPH",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GRAPHVALUES ::= values colom opensquarebracket DOUBLELIST closesquarebracket 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHVALUES",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GRAPHXAXIS ::= xaxis colom opensquarebracket STRINGLIST closesquarebracket 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHXAXIS",15, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GRAPHTITLE ::= title colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GRAPHTITLE ::= title colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GRAPHPROP ::= GRAPHVALUES 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "values", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GRAPHPROP ::= GRAPHXAXIS 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "xaxis", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GRAPHPROP ::= GRAPHTITLE 
            {
              Object[] RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {title, "title", titleright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATION ::= doubletype id equals decimal 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, Double.parseDouble(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARATION ::= strtype id equals strtext 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, Tools.trimStr(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARATIONS ::= error semicolom 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARATIONS ::= DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SETGLOBALS ::= setglobals openbracket DECLARATIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("SETGLOBALS",3, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COMPARE ::= error openparenthesis 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("COMPARE",2, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COMPARE ::= compare openparenthesis strtext comma strtext closeparenthesis semicolom 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).value;
		int path1left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).left;
		int path1right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).right;
		String path1 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).value;
		int path2left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int path2right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String path2 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		
    Reports reports = Reports.getInstance();
    reports.setComparePaths(Tools.trimStr(path1), Tools.trimStr(path2), idright);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("COMPARE",2, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCTION ::= error closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCTION ::= error openbracket 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCTION ::= COMPARE 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCTION ::= LINEGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCTION ::= PIEGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCTION ::= BARGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FUNCTIONS ::= SETGLOBALS FUNCTIONS 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FUNCTIONS ::= SETGLOBALS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FUNCTIONS ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUNCTIONS ::= FUNCTION FUNCTIONS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MAIN ::= main openbracket FUNCTIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // START ::= MAIN 
            {
              Object RESULT =null;
		
    Reports reports = Reports.getInstance();
    reports.generateGraphs();

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DOUBLELIST ::= id 
            {
              ArrayList<Double> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    if(reports.getGlobalProp(text) != null)
        RESULT.add((Double) reports.getGlobalProp(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOUBLELIST ::= decimal 
            {
              ArrayList<Double> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add(Double.parseDouble(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DOUBLELIST ::= DOUBLELIST comma id 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(text) != null)
        RESULT.add((Double) reports.getGlobalProp(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DOUBLELIST ::= DOUBLELIST comma decimal 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(Double.parseDouble(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRINGLIST ::= id 
            {
              ArrayList<String> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    if(reports.getGlobalProp(text) != null)
        RESULT.add((String) reports.getGlobalProp(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STRINGLIST ::= strtext 
            {
              ArrayList<String> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    RESULT.add(Tools.trimStr(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STRINGLIST ::= STRINGLIST comma id 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(text) != null)
        RESULT.add((String) reports.getGlobalProp(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STRINGLIST ::= STRINGLIST comma strtext 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(Tools.trimStr(text));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		RESULT = start_val;
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FCAParser$parser.done_parsing();
          return CUP$FCAParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

