
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Aug 23 11:40:18 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.fca;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.alexsantos.proyecto01.fca.Reports;
import com.alexsantos.proyecto01.graphs.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Aug 23 11:40:18 CST 2021
  */
public class FCAParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FCAParser() {super();}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\003\000\002\003" +
    "\006\000\002\010\004\000\002\010\003\000\002\010\003" +
    "\000\002\010\004\000\002\011\003\000\002\011\004\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\013\003\000\002\014\005\000\002\014\005\000\002\014" +
    "\003\000\002\014\003\000\002\004\010\000\002\005\006" +
    "\000\002\006\005\000\002\006\004\000\002\007\006\000" +
    "\002\007\006\000\002\012\006\000\002\015\005\000\002" +
    "\015\004\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\021\005\000\002\021\005\000\002\023\007\000" +
    "\002\024\007\000\002\017\005\000\002\017\005\000\002" +
    "\020\005\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\004\004\004\001\002\000\004\030\010\001" +
    "\002\000\004\002\000\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\010\005\015\006\016\007" +
    "\012\001\002\000\012\005\015\006\016\007\012\031\ufffc" +
    "\001\002\000\004\030\050\001\002\000\004\032\047\001" +
    "\002\000\004\031\046\001\002\000\004\033\041\001\002" +
    "\000\004\030\022\001\002\000\012\005\ufffa\006\ufffa\007" +
    "\ufffa\031\ufffa\001\002\000\012\005\015\006\016\007\012" +
    "\031\ufffd\001\002\000\004\031\ufffe\001\002\000\006\010" +
    "\026\011\025\001\002\000\010\010\026\011\025\031\036" +
    "\001\002\000\004\032\035\001\002\000\004\015\032\001" +
    "\002\000\004\015\027\001\002\000\004\022\030\001\002" +
    "\000\004\014\031\001\002\000\004\032\uffec\001\002\000" +
    "\004\022\033\001\002\000\004\013\034\001\002\000\004" +
    "\032\uffeb\001\002\000\010\010\uffed\011\uffed\031\uffed\001" +
    "\002\000\012\005\uffef\006\uffef\007\uffef\031\uffef\001\002" +
    "\000\004\032\040\001\002\000\010\010\uffee\011\uffee\031" +
    "\uffee\001\002\000\004\014\042\001\002\000\004\017\043" +
    "\001\002\000\004\014\044\001\002\000\004\034\045\001" +
    "\002\000\004\032\ufff0\001\002\000\004\002\uffff\001\002" +
    "\000\012\005\ufff9\006\ufff9\007\ufff9\031\ufff9\001\002\000" +
    "\010\040\055\041\060\042\053\001\002\000\016\031\110" +
    "\040\055\041\060\042\053\043\113\044\111\001\002\000" +
    "\004\032\uffe3\001\002\000\004\035\076\001\002\000\004" +
    "\032\uffe2\001\002\000\004\035\073\001\002\000\004\032" +
    "\uffe4\001\002\000\004\032\072\001\002\000\004\035\061" +
    "\001\002\000\004\036\062\001\002\000\006\014\063\015" +
    "\065\001\002\000\006\017\ufff6\037\ufff6\001\002\000\006" +
    "\017\066\037\067\001\002\000\006\017\ufff5\037\ufff5\001" +
    "\002\000\006\014\070\015\071\001\002\000\004\032\uffdf" +
    "\001\002\000\006\017\ufff8\037\ufff8\001\002\000\006\017" +
    "\ufff7\037\ufff7\001\002\000\016\031\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\043\uffe8\044\uffe8\001\002\000\006\014\074\015" +
    "\075\001\002\000\004\032\uffe1\001\002\000\004\032\uffe0" +
    "\001\002\000\004\036\077\001\002\000\006\013\100\015" +
    "\102\001\002\000\006\017\ufff2\037\ufff2\001\002\000\006" +
    "\017\103\037\104\001\002\000\006\017\ufff1\037\ufff1\001" +
    "\002\000\006\013\105\015\106\001\002\000\004\032\uffde" +
    "\001\002\000\006\017\ufff4\037\ufff4\001\002\000\006\017" +
    "\ufff3\037\ufff3\001\002\000\004\032\uffe7\001\002\000\012" +
    "\005\uffea\006\uffea\007\uffea\031\uffea\001\002\000\004\035" +
    "\122\001\002\000\004\032\121\001\002\000\004\035\116" +
    "\001\002\000\004\032\uffe5\001\002\000\004\032\uffe6\001" +
    "\002\000\006\014\117\015\120\001\002\000\004\032\uffdd" +
    "\001\002\000\004\032\uffdc\001\002\000\016\031\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9\001\002\000\006" +
    "\014\123\015\124\001\002\000\004\032\uffdb\001\002\000" +
    "\004\032\uffda\001\002\000\004\031\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\012\005\010\010\013\011\017\012\016\001" +
    "\001\000\014\004\012\005\010\010\124\011\017\012\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\012\005\010\010\020\011\017\012\016\001" +
    "\001\000\002\001\001\000\006\006\022\007\023\001\001" +
    "\000\004\007\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\050\021" +
    "\055\022\056\023\051\024\053\001\001\000\020\016\111" +
    "\017\114\020\113\021\055\022\106\023\051\024\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FCAParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FCAParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FCAParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error Sintáctico en la Línea " + s.right +
        " Columna " + s.left + ". Componente: " + s.value + ".");

    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error síntactico irrecuperable en la Línea " +
        s.right + " Columna " + s.left + ". Componente: " + s.value +
        " no reconocido.");
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FCAParser$actions {
  private final FCAParser parser;

  /** Constructor */
  CUP$FCAParser$actions(FCAParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FCAParser$do_action(
    int                        CUP$FCAParser$act_num,
    java_cup.runtime.lr_parser CUP$FCAParser$parser,
    java.util.Stack            CUP$FCAParser$stack,
    int                        CUP$FCAParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FCAParser$result;

      /* select the action based on the action number */
      switch (CUP$FCAParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BARGRAPHPTITLEY ::= bgtitley colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    RESULT = (String) reports.getGlobalProp(tId);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BARGRAPHPTITLEY ::= bgtitley colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = text;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BARGRAPHPTITLEX ::= bgtitlex colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    RESULT = (String) reports.getGlobalProp(tId);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BARGRAPHPTITLEX ::= bgtitlex colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = text;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GRAPHVALUES ::= values colom opensquarebracket DOUBLELIST closesquarebracket 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHVALUES",18, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // GRAPHXAXIS ::= xaxis colom opensquarebracket STRINGLIST closesquarebracket 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHXAXIS",17, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GRAPHTITLE ::= title colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    RESULT = (String) reports.getGlobalProp(tId);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",15, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GRAPHTITLE ::= title colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = text;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",15, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GRAPHPROP ::= GRAPHVALUES 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "values", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // GRAPHPROP ::= GRAPHXAXIS 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "xaxis", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // GRAPHPROP ::= GRAPHTITLE 
            {
              Object[] RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {title, "title", titleright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BARGRAPHPROP ::= BARGRAPHPTITLEY 
            {
              Object[] RESULT =null;
		int propyleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propyright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String propy = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {propy, "yaxisTitle", propyright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BARGRAPHPROP ::= BARGRAPHPTITLEX 
            {
              Object[] RESULT =null;
		int propxleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propxright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String propx = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {propx, "xaxisTitle", propxright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BARGRAPHPROP ::= GRAPHPROP 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = prop;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BARGRAPHPROPS ::= GRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    BarGraph barGraph = new BarGraph();
    RESULT = barGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BARGRAPHPROPS ::= BARGRAPHPROPS BARGRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BARGRAPH ::= bargraph openbracket BARGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.graphs.add(graph);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPH",8, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARATION ::= doubletype id equals decimal 
            {
              Object RESULT =null;
		int idbdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idbdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idbd = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int dbresleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int dbresright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String dbres = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idbd, Double.parseDouble(dbres));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARATION ::= strtype id equals strtext 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, res.substring(1, res.length() - 1));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARATIONS ::= DECLARATION semicolom 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SETGLOBALS ::= setglobals openbracket DECLARATIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("SETGLOBALS",3, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COMPARE ::= compare openparenthesis strtext comma strtext closeparenthesis 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).value;
		int path1left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int path1right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		String path1 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		int path2left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int path2right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		String path2 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.setComparePaths(path1, path2, idright);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("COMPARE",2, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DOUBLELIST ::= id 
            {
              ArrayList<Double> RESULT =null;
		int text4left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text4right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text4 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add((Double) reports.getGlobalProp(text4));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DOUBLELIST ::= decimal 
            {
              ArrayList<Double> RESULT =null;
		int text3left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text3right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text3 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add(Double.parseDouble(text3));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DOUBLELIST ::= DOUBLELIST comma id 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text2 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    RESULT.add((Double) reports.getGlobalProp(text2));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DOUBLELIST ::= DOUBLELIST comma decimal 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int text1left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text1 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(Double.parseDouble(text1));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STRINGLIST ::= id 
            {
              ArrayList<String> RESULT =null;
		int text4left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text4right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text4 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    RESULT.add((String) reports.getGlobalProp(text4));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STRINGLIST ::= strtext 
            {
              ArrayList<String> RESULT =null;
		int text3left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text3right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text3 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    RESULT.add(text3.substring(1, text3.length() - 1));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STRINGLIST ::= STRINGLIST comma id 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int text2left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text2right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text2 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    RESULT.add((String) reports.getGlobalProp(text2));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STRINGLIST ::= STRINGLIST comma strtext 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int text1left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int text1right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text1 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(text1.substring(1, text1.length() - 1));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // FUNCTION ::= COMPARE semicolom 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // FUNCTION ::= BARGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FUNCTIONS ::= SETGLOBALS FUNCTIONS 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FUNCTIONS ::= SETGLOBALS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FUNCTIONS ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // FUNCTIONS ::= FUNCTION FUNCTIONS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MAIN ::= main openbracket FUNCTIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // START ::= MAIN 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		RESULT = start_val;
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FCAParser$parser.done_parsing();
          return CUP$FCAParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

