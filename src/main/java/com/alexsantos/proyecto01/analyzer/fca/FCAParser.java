
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Sep 11 00:51:48 CST 2021
//----------------------------------------------------

package com.alexsantos.proyecto01.analyzer.fca;

import java_cup.runtime.*;
import java.util.ArrayList;
import com.alexsantos.proyecto01.graphs.*;
import com.alexsantos.proyecto01.utils.Tools;
import com.alexsantos.proyecto01.fca.Reports;
import com.alexsantos.proyecto01.analyzer.errors.*;
import com.alexsantos.proyecto01.analyzer.tokens.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Sep 11 00:51:48 CST 2021
  */
public class FCAParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FCAParser() {super();}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FCAParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\016\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\002\003\000\002\003\006\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\004\000\002\011\004\000\002" +
    "\004\011\000\002\004\004\000\002\005\006\000\002\006" +
    "\005\000\002\006\004\000\002\006\004\000\002\007\006" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\015\006\000\002\020\014\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\021\005\000\002\021" +
    "\005\000\002\023\007\000\002\024\007\000\002\014\006" +
    "\000\002\032\005\000\002\032\004\000\002\032\004\000" +
    "\002\033\003\000\002\033\003\000\002\034\005\000\002" +
    "\034\005\000\002\013\006\000\002\031\005\000\002\031" +
    "\004\000\002\031\004\000\002\012\006\000\002\025\005" +
    "\000\002\025\004\000\002\025\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\027\005\000\002" +
    "\027\005\000\002\030\005\000\002\030\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\011\004\001\002\000\004\024\010\001" +
    "\002\000\004\002\ufff4\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\016\003\021\012\013\013" +
    "\014\014\025\015\020\016\015\001\002\000\020\003\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\025\uffed\001" +
    "\002\000\020\003\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\025\uffee\001\002\000\004\027\206\001\002\000" +
    "\004\024\163\001\002\000\004\024\144\001\002\000\020" +
    "\003\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb\025" +
    "\uffeb\001\002\000\020\003\021\012\013\013\014\014\025" +
    "\015\020\016\015\025\ufff0\001\002\000\004\024\132\001" +
    "\002\000\010\024\131\025\127\027\130\001\002\000\020" +
    "\003\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\025" +
    "\uffec\001\002\000\020\003\021\012\013\013\014\014\025" +
    "\015\020\016\015\025\ufff1\001\002\000\004\025\125\001" +
    "\002\000\004\024\026\001\002\000\016\003\034\034\036" +
    "\035\037\036\040\040\033\041\031\001\002\000\016\025" +
    "\122\034\036\035\037\036\040\040\033\041\031\001\002" +
    "\000\004\026\uffc5\001\002\000\004\031\117\001\002\000" +
    "\004\026\116\001\002\000\004\031\113\001\002\000\004" +
    "\026\112\001\002\000\004\026\uffda\001\002\000\004\031" +
    "\107\001\002\000\004\031\076\001\002\000\004\031\045" +
    "\001\002\000\004\026\uffdc\001\002\000\004\026\uffc3\001" +
    "\002\000\004\026\uffc4\001\002\000\004\026\uffdb\001\002" +
    "\000\004\032\046\001\002\000\010\004\047\006\054\020" +
    "\051\001\002\000\006\022\ufff8\033\ufff8\001\002\000\006" +
    "\022\ufff5\033\ufff5\001\002\000\004\024\063\001\002\000" +
    "\006\022\055\033\056\001\002\000\006\022\ufff6\033\ufff6" +
    "\001\002\000\006\022\ufff7\033\ufff7\001\002\000\010\004" +
    "\057\006\062\020\051\001\002\000\004\026\uffd6\001\002" +
    "\000\006\022\ufffc\033\ufffc\001\002\000\006\022\ufff9\033" +
    "\ufff9\001\002\000\006\022\ufffa\033\ufffa\001\002\000\006" +
    "\022\ufffb\033\ufffb\001\002\000\006\017\064\021\065\001" +
    "\002\000\004\022\067\001\002\000\004\025\066\001\002" +
    "\000\010\022\uffde\026\uffde\033\uffde\001\002\000\004\005" +
    "\070\001\002\000\004\022\071\001\002\000\004\005\072" +
    "\001\002\000\004\022\073\001\002\000\004\005\074\001" +
    "\002\000\004\025\075\001\002\000\010\022\uffdd\026\uffdd" +
    "\033\uffdd\001\002\000\004\032\077\001\002\000\006\005" +
    "\100\006\102\001\002\000\006\022\ufffe\033\ufffe\001\002" +
    "\000\006\022\103\033\104\001\002\000\006\022\ufffd\033" +
    "\ufffd\001\002\000\006\005\105\006\106\001\002\000\004" +
    "\026\uffd7\001\002\000\006\022\000\033\000\001\002\000" +
    "\006\022\uffff\033\uffff\001\002\000\006\005\110\006\111" +
    "\001\002\000\004\026\uffd9\001\002\000\004\026\uffd8\001" +
    "\002\000\016\025\uffc6\034\uffc6\035\uffc6\036\uffc6\040\uffc6" +
    "\041\uffc6\001\002\000\006\005\114\006\115\001\002\000" +
    "\004\026\uffc2\001\002\000\004\026\uffc1\001\002\000\016" +
    "\025\uffc7\034\uffc7\035\uffc7\036\uffc7\040\uffc7\041\uffc7\001" +
    "\002\000\006\005\120\006\121\001\002\000\004\026\uffc0" +
    "\001\002\000\004\026\uffbf\001\002\000\020\003\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\025\uffc9\001\002" +
    "\000\004\026\124\001\002\000\016\025\uffc8\034\uffc8\035" +
    "\uffc8\036\uffc8\040\uffc8\041\uffc8\001\002\000\004\002\ufff3" +
    "\001\002\000\004\025\ufff2\001\002\000\020\003\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\025\uffe9\001\002" +
    "\000\020\003\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\025\uffe7\001\002\000\020\003\uffea\012\uffea\013\uffea" +
    "\014\uffea\015\uffea\016\uffea\025\uffea\001\002\000\012\003" +
    "\134\034\036\035\037\036\040\001\002\000\004\026\142" +
    "\001\002\000\004\026\141\001\002\000\012\025\136\034" +
    "\036\035\037\036\040\001\002\000\020\003\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\025\uffcd\001\002\000" +
    "\004\026\140\001\002\000\012\025\uffcc\034\uffcc\035\uffcc" +
    "\036\uffcc\001\002\000\012\025\uffca\034\uffca\035\uffca\036" +
    "\uffca\001\002\000\012\025\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\001\002\000\004\025\uffef\001\002\000\010\003\147\034" +
    "\036\037\150\001\002\000\004\026\uffd0\001\002\000\010" +
    "\025\160\034\036\037\150\001\002\000\004\026\157\001" +
    "\002\000\004\031\154\001\002\000\004\026\153\001\002" +
    "\000\004\026\uffd1\001\002\000\010\025\uffd3\034\uffd3\037" +
    "\uffd3\001\002\000\006\005\155\006\156\001\002\000\004" +
    "\026\uffcf\001\002\000\004\026\uffce\001\002\000\010\025" +
    "\uffd2\034\uffd2\037\uffd2\001\002\000\020\003\uffd5\012\uffd5" +
    "\013\uffd5\014\uffd5\015\uffd5\016\uffd5\025\uffd5\001\002\000" +
    "\004\026\162\001\002\000\010\025\uffd4\034\uffd4\037\uffd4" +
    "\001\002\000\010\003\165\007\170\010\167\001\002\000" +
    "\010\007\170\010\167\025\203\001\002\000\004\026\202" +
    "\001\002\000\004\026\201\001\002\000\004\006\174\001" +
    "\002\000\004\006\171\001\002\000\004\023\172\001\002" +
    "\000\004\005\173\001\002\000\004\026\uffe2\001\002\000" +
    "\004\023\175\001\002\000\006\004\177\020\051\001\002" +
    "\000\004\026\uffdf\001\002\000\004\026\uffe1\001\002\000" +
    "\004\026\uffe0\001\002\000\010\007\uffe4\010\uffe4\025\uffe4" +
    "\001\002\000\010\007\uffe3\010\uffe3\025\uffe3\001\002\000" +
    "\020\003\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\025\uffe6\001\002\000\004\026\205\001\002\000\010\007" +
    "\uffe5\010\uffe5\025\uffe5\001\002\000\004\005\207\001\002" +
    "\000\004\022\210\001\002\000\004\005\211\001\002\000" +
    "\004\030\212\001\002\000\004\026\213\001\002\000\020" +
    "\003\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\025" +
    "\uffe8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\015\005\016\010\023\011\022\012\011\013" +
    "\010\014\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\015\005\016\010\142\011\022" +
    "\012\011\013\010\014\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\015\005\016" +
    "\010\125\011\022\012\011\013\010\014\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\040\022\027" +
    "\023\043\024\034\025\026\026\031\027\042\030\041\001" +
    "\001\000\020\021\040\022\027\023\043\024\034\026\122" +
    "\027\042\030\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\015" +
    "\052\017\051\020\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\060\020\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\021\040" +
    "\022\132\023\043\024\034\031\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\040\022\136\023\043" +
    "\024\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\151\032\145\033\150\034\144\001" +
    "\001\000\002\001\001\000\010\021\151\033\160\034\144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\163\007\165\001\001\000\004\007\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\177\020\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FCAParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FCAParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FCAParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    String filePath;

    public void setFilePath (String path) {
        filePath = path;
    }

    public void syntax_error (Symbol s) {
        System.err.println("\nError sintactico en la linea " + s.right +
        " columna " + s.left + " componente: " + s.value + ".\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

    public void unrecovered_syntax_error (Symbol s) throws java.lang.Exception{
        System.err.println("\nError sintactico irrecuperable en la linea " +
        s.right + " columna " + s.left + " componente: " + s.value +
        " no reconocido.\n");

        ErrorHandler errorHandler = ErrorHandler.getInstance();
        errorHandler.add(s, filePath);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FCAParser$actions {


    public void addToken (String lex, String key, int line, int col) {
        TokensHandler tokens = TokensHandler.getInstance();
        tokens.add(parser.filePath, lex, key, line, col);
    }

  private final FCAParser parser;

  /** Constructor */
  CUP$FCAParser$actions(FCAParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FCAParser$do_action(
    int                        CUP$FCAParser$act_num,
    java_cup.runtime.lr_parser CUP$FCAParser$parser,
    java.util.Stack            CUP$FCAParser$stack,
    int                        CUP$FCAParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FCAParser$result;

      /* select the action based on the action number */
      switch (CUP$FCAParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // BARGRAPHPTITLEY ::= bgtitley colom id 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

    addToken("bgtitley", "tituloy", lineright, lineleft);
    addToken("id", tId, tIdright, tIdleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",22, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // BARGRAPHPTITLEY ::= bgtitley colom strtext 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);
    addToken("bgtitley", "tituloy", lineright, lineleft);
    addToken("string", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEY",22, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BARGRAPHPTITLEX ::= bgtitlex colom id 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

    addToken("bgtitlex", "titulox", lineright, lineleft);
    addToken("id", tId, tIdright, tIdleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",21, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BARGRAPHPTITLEX ::= bgtitlex colom strtext 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);
    addToken("bgtitlex", "titulox", lineright, lineleft);
    addToken("string", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPTITLEX",21, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // BARGRAPHPROP ::= BARGRAPHPTITLEY 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String prop = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {prop, "yaxisTitle", propright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",20, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BARGRAPHPROP ::= BARGRAPHPTITLEX 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String prop = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {prop, "xaxisTitle", propright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",20, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BARGRAPHPROP ::= GRAPHPROP 
            {
              Object[] RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = prop;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROP",20, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BARGRAPHPROPS ::= error semicolom 
            {
              BarGraph RESULT =null;
		
    BarGraph barGraph = new BarGraph();
    RESULT = barGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",19, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BARGRAPHPROPS ::= BARGRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    BarGraph barGraph = new BarGraph();
    RESULT = barGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",19, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // BARGRAPHPROPS ::= BARGRAPHPROPS BARGRAPHPROP semicolom 
            {
              BarGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPHPROPS",19, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // BARGRAPH ::= bargraph openbracket BARGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		BarGraph graph = (BarGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "barras");
    addToken("bargraph", "graficabarras", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("BARGRAPH",8, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PIEGRAPHPROPS ::= error semicolom 
            {
              PieGraph RESULT =null;
		
    PieGraph pieGraph = new PieGraph();
    RESULT = pieGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PIEGRAPHPROPS ::= GRAPHPROP semicolom 
            {
              PieGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    PieGraph pieGraph = new PieGraph();
    RESULT = pieGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PIEGRAPHPROPS ::= PIEGRAPHPROPS GRAPHPROP semicolom 
            {
              PieGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		PieGraph graph = (PieGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPHPROPS",23, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PIEGRAPH ::= piegraph openbracket PIEGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		PieGraph graph = (PieGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "pie");
    addToken("piegraph", "graficapie", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("PIEGRAPH",9, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LINEGRAPHFILE ::= file colom id 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;
    addToken("file", "archivo", lineright, lineleft);
    addToken("id", tId , tIdright, tIdleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHFILE",26, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LINEGRAPHFILE ::= file colom strtext 
            {
              String RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);
    addToken("file", "archivo", lineright, lineleft);
    addToken("string", text , textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHFILE",26, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LINEGRAPHPROP ::= LINEGRAPHFILE 
            {
              Object[] RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {text, "file", textright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROP",25, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LINEGRAPHPROP ::= GRAPHTITLE 
            {
              Object[] RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {text, "title", textright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROP",25, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LINEGRAPHPROPS ::= error semicolom 
            {
              LineGraph RESULT =null;
		
    LineGraph lineGraph = new LineGraph();
    RESULT = lineGraph;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",24, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LINEGRAPHPROPS ::= LINEGRAPHPROP semicolom 
            {
              LineGraph RESULT =null;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    LineGraph lineGraph = new LineGraph();
    RESULT = lineGraph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",24, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LINEGRAPHPROPS ::= LINEGRAPHPROPS LINEGRAPHPROP semicolom 
            {
              LineGraph RESULT =null;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		LineGraph graph = (LineGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int propleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int propright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object[] prop = (Object[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = graph;
    RESULT.setProp(prop);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPHPROPS",24, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LINEGRAPH ::= linegraph openbracket LINEGRAPHPROPS closebracket 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		int graphleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int graphright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		LineGraph graph = (LineGraph)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    Reports reports = Reports.getInstance();
    reports.addGraph(graph, "lineas");
    addToken("linegraph", "graficalineas", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("LINEGRAPH",10, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // GRAPHVALUES ::= values colom opensquarebracket DOUBLELIST closesquarebracket 
            {
              ArrayList<Double> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;
    addToken("values", "valores", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHVALUES",18, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GRAPHXAXIS ::= xaxis colom opensquarebracket STRINGLIST closesquarebracket 
            {
              ArrayList<String> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    RESULT = list;
    addToken("xaxis", "ejex", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHXAXIS",17, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // GRAPHTITLE ::= title colom id 
            {
              String RESULT =null;
		int tIdleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int tIdright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String tId = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(tId) != null)
        RESULT = (String) reports.getGlobalProp(tId);
    else
        RESULT = null;

    addToken("id", tId, tIdright, tIdleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",15, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GRAPHTITLE ::= title colom strtext 
            {
              String RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = Tools.trimStr(text);
    addToken("title", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHTITLE",15, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GRAPHPROP ::= GRAPHVALUES 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "values", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GRAPHPROP ::= GRAPHXAXIS 
            {
              Object[] RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {list, "xaxis", listright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // GRAPHPROP ::= GRAPHTITLE 
            {
              Object[] RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String title = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = new Object[] {title, "title", titleright};

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GRAPHPROP",16, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FILEPOINTS ::= dollar openbracket filePoints comma strtext comma strtext comma strtext closebracket 
            {
              String[] RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-7)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-7)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-7)).value;
		int pathleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).left;
		int pathright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).right;
		String path = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-5)).value;
		int keyleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		String key = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		
    String tPath = Tools.trimStr(path);
    String tKey = Tools.trimStr(key);
    String tId =Tools.trimStr(id);
    String[] params = new String[] {tPath, tKey, tId};
    RESULT = params;
    addToken("filePoints", tPath + " , " + tKey + " , " + tId, lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FILEPOINTS",14, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-9)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // GENPOINTS ::= dollar openbracket genPoints closebracket 
            {
              Object RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)).value;
		
    addToken("genPoints", "PuntajeGeneral", lineright, lineleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("GENPOINTS",11, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARATION ::= doubletype id equals FILEPOINTS 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String[] params = (String[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr,
    reports.getFilePoints(params[0], params[1], params[2]));
    addToken("id", idstr, idstrright, idstrleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARATION ::= doubletype id equals GENPOINTS 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object text = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, reports.genPoints);
    addToken("id", idstr, idstrright, idstrleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATION ::= doubletype id equals decimal 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, Double.parseDouble(text));
    addToken("id", idstr, idstrright, idstrleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATION ::= strtype id equals strtext 
            {
              Object RESULT =null;
		int idstrleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int idstrright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String idstr = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    reports.setGlobalProp(idstr, Tools.trimStr(text));
    addToken("id", idstr, idstrright, idstrleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATION",5, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARATIONS ::= error semicolom 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARATIONS ::= DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARATIONS ::= DECLARATIONS DECLARATION semicolom 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",4, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SETGLOBALS ::= setglobals openbracket DECLARATIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("SETGLOBALS",3, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMPARE ::= error openparenthesis 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("COMPARE",2, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPARE ::= compare openparenthesis strtext comma strtext closeparenthesis semicolom 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)).value;
		int path1left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).left;
		int path1right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).right;
		String path1 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-4)).value;
		int path2left = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int path2right = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		String path2 = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		
    Reports reports = Reports.getInstance();
    reports.setComparePaths(Tools.trimStr(path1), Tools.trimStr(path2), idright);
    addToken("compare", path1 +" , "+path2, idright, idleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("COMPARE",2, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-6)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCTION ::= error closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCTION ::= error openbracket 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCTION ::= COMPARE 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCTION ::= LINEGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCTION ::= PIEGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCTION ::= BARGRAPH 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTION",7, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FUNCTIONS ::= SETGLOBALS FUNCTIONS 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FUNCTIONS ::= SETGLOBALS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCTIONS ::= FUNCTION 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCTIONS ::= FUNCTION FUNCTIONS 
            {
              Object RESULT =null;

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("FUNCTIONS",6, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MAIN ::= main openbracket FUNCTIONS closebracket 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("MAIN",1, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-3)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // START ::= MAIN 
            {
              Object RESULT =null;
		 
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DOUBLELIST ::= FILEPOINTS 
            {
              ArrayList<Double> RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String[] params = (String[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add(reports.getFilePoints(params[0], params[1], params[2]));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DOUBLELIST ::= GENPOINTS 
            {
              ArrayList<Double> RESULT =null;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add(reports.genPoints);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DOUBLELIST ::= id 
            {
              ArrayList<Double> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    if(reports.getGlobalProp(text) != null)
        RESULT.add((Double) reports.getGlobalProp(text));
    addToken("id", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DOUBLELIST ::= decimal 
            {
              ArrayList<Double> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<Double> newList = new ArrayList<Double>();
    RESULT = newList;
    RESULT.add(Double.parseDouble(text));
    addToken("double", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DOUBLELIST ::= DOUBLELIST comma FILEPOINTS 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String[] params = (String[])((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    RESULT.add(reports.getFilePoints(params[0], params[1], params[2]));

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DOUBLELIST ::= DOUBLELIST comma GENPOINTS 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int lineleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int lineright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		Object line = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    RESULT.add((Double) reports.genPoints);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DOUBLELIST ::= DOUBLELIST comma id 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(text) != null)
        RESULT.add((Double) reports.getGlobalProp(text));

    addToken("id", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DOUBLELIST ::= DOUBLELIST comma decimal 
            {
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(Double.parseDouble(text));
    addToken("double", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("DOUBLELIST",13, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STRINGLIST ::= id 
            {
              ArrayList<String> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    Reports reports = Reports.getInstance();
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    if(reports.getGlobalProp(text) != null)
        RESULT.add((String) reports.getGlobalProp(text));
    addToken("string", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STRINGLIST ::= strtext 
            {
              ArrayList<String> RESULT =null;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    ArrayList<String> newList = new ArrayList<String>();
    RESULT = newList;
    RESULT.add(Tools.trimStr(text));
    addToken("string", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // STRINGLIST ::= STRINGLIST comma id 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    Reports reports = Reports.getInstance();
    if(reports.getGlobalProp(text) != null)
        RESULT.add((String) reports.getGlobalProp(text));
    addToken("id", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // STRINGLIST ::= STRINGLIST comma strtext 
            {
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)).value;
		int textleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).left;
		int textright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()).right;
		String text = (String)((java_cup.runtime.Symbol) CUP$FCAParser$stack.peek()).value;
		
    RESULT = list;
    RESULT.add(Tools.trimStr(text));
    addToken("string", text, textright, textleft);

              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("STRINGLIST",12, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-2)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          return CUP$FCAParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= START EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)).value;
		RESULT = start_val;
              CUP$FCAParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FCAParser$stack.elementAt(CUP$FCAParser$top-1)), ((java_cup.runtime.Symbol)CUP$FCAParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FCAParser$parser.done_parsing();
          return CUP$FCAParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

